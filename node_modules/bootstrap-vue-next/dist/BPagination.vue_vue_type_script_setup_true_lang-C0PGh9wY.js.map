{"version":3,"file":"BPagination.vue_vue_type_script_setup_true_lang-C0PGh9wY.js","sources":["../src/components/BPagination/BPagination.vue"],"sourcesContent":["<template>\n  <ul\n    class=\"pagination\"\n    :class=\"computedWrapperClasses\"\n    role=\"menubar\"\n    :aria-disabled=\"props.disabled\"\n    :aria-label=\"props.ariaLabel || undefined\"\n  >\n    <template v-for=\"page in pages\" :key=\"`page-${page.id}`\">\n      <li v-bind=\"page.li\">\n        <span\n          v-if=\"page.id === FIRST_ELLIPSIS || page.id === LAST_ELLIPSIS\"\n          v-bind=\"ellipsisProps.span\"\n        >\n          <slot name=\"ellipsis-text\">\n            {{ props.ellipsisText || '...' }}\n          </slot>\n        </span>\n        <component v-bind=\"page.button\" :is=\"page.button.is\" v-else @click=\"page.clickHandler\">\n          <slot\n            :name=\"page.text.name\"\n            :disabled=\"page.text.disabled\"\n            :page=\"page.text.page\"\n            :index=\"page.text.index\"\n            :active=\"page.text.active\"\n            :content=\"page.text.value\"\n          >\n            {{ page.text.value }}\n          </slot>\n        </component>\n      </li>\n    </template>\n  </ul>\n</template>\n\n<script setup lang=\"ts\">\nimport {BvEvent} from '../../utils'\nimport {computed, watch} from 'vue'\nimport type {BPaginationProps} from '../../types/ComponentProps'\nimport {useAlignment} from '../../composables/useAlignment'\nimport {useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {ClassValue} from '../../types/AnyValuedAttributes'\n\n// Threshold of limit size when we start/stop showing ellipsis\nconst ELLIPSIS_THRESHOLD = 3\n\nconst FIRST_BUTTON = -1\nconst PREV_BUTTON = -2\nconst NEXT_BUTTON = -3\nconst LAST_BUTTON = -4\nconst FIRST_ELLIPSIS = -5\nconst LAST_ELLIPSIS = -6\n\n// This is necessary because type inference isn't succeeding for the pages computed\ninterface PageButton {\n  id: number\n  li: Record<string, unknown>\n  button: Record<string, unknown>\n  text: Record<string, unknown>\n  clickHandler: (e: Readonly<MouseEvent>) => void\n}\n\nconst _props = withDefaults(defineProps<Omit<BPaginationProps, 'modelValue'>>(), {\n  align: 'start',\n  ariaControls: undefined,\n  ariaLabel: 'Pagination',\n  disabled: false,\n  ellipsisClass: undefined,\n  ellipsisText: '\\u2026',\n  firstClass: undefined,\n  firstNumber: false,\n  firstText: '\\u00AB',\n  hideEllipsis: false,\n  hideGotoEndButtons: false,\n  labelFirstPage: 'Go to first page',\n  labelLastPage: 'Go to last page',\n  labelNextPage: 'Go to next page',\n  labelPage: 'Go to page',\n  labelPrevPage: 'Go to previous page',\n  lastClass: undefined,\n  lastNumber: false,\n  lastText: '\\u00BB',\n  limit: 5,\n  nextClass: undefined,\n  nextText: '\\u203A',\n  pageClass: undefined,\n  perPage: DEFAULT_PER_PAGE,\n  pills: false,\n  prevClass: undefined,\n  prevText: '\\u2039',\n  size: undefined,\n  totalRows: DEFAULT_TOTAL_ROWS,\n})\nconst props = useDefaults(_props, 'BPagination')\n\nconst emit = defineEmits<{\n  'page-click': [event: BvEvent, pageNumber: number]\n}>()\n\nconst modelValue = defineModel<Exclude<BPaginationProps['modelValue'], undefined>>({default: 1})\n\nconst limitNumber = useToNumber(() => props.limit, {nanToZero: true, method: 'parseInt'})\nconst perPageNumber = useToNumber(() => props.perPage, {nanToZero: true, method: 'parseInt'})\nconst totalRowsNumber = useToNumber(() => props.totalRows, {nanToZero: true, method: 'parseInt'})\nconst modelValueNumber = useToNumber(modelValue, {nanToZero: true, method: 'parseInt'})\n\nconst perPageSanitized = computed(() => Math.max(perPageNumber.value || DEFAULT_PER_PAGE, 1))\nconst totalRowsSanitized = computed(() => Math.max(totalRowsNumber.value || DEFAULT_TOTAL_ROWS, 0))\n// Use Active to on page-item to denote active tab\nconst numberOfPages = computed(() => Math.ceil(totalRowsSanitized.value / perPageSanitized.value))\nconst computedFill = computed(() => props.align === 'fill')\n// This doesn't use the computedFill util because TS cannot infer that it would never be 'fill'\nconst justifyAlign = computed(() => (props.align === 'fill' ? 'start' : props.align))\n\nconst alignment = useAlignment(justifyAlign)\n\nconst isActivePage = (pageNumber: number) => pageNumber === modelValueNumber.value\nconst getTabIndex = (num: number) => (props.disabled ? null : isActivePage(num) ? '0' : '-1')\n\nconst checkDisabled = (num: number) =>\n  props.disabled ||\n  isActivePage(num) ||\n  modelValueNumber.value < 1 ||\n  // Check if the number is out of bounds\n  num < 1 ||\n  num > numberOfPages.value\n\nconst firstDisabled = computed(() => checkDisabled(1))\nconst prevDisabled = computed(() => checkDisabled(modelValueNumber.value - 1))\nconst lastDisabled = computed(() => checkDisabled(numberOfPages.value))\nconst nextDisabled = computed(() => checkDisabled(modelValueNumber.value + 1))\n\nconst getBaseButtonProps = ({\n  page,\n  classVal,\n  dis,\n  slotName,\n  textValue,\n  tabIndex,\n  label,\n  position,\n  isActive,\n  role,\n  hidden,\n}: {\n  page: number\n  dis: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  tabIndex?: string\n  label?: string\n  position?: number\n  isActive?: boolean\n  role?: string\n  hidden?: boolean\n}) => ({\n  li: {\n    'class': [\n      'page-item',\n      {\n        'active': isActive,\n        'disabled': dis,\n        'flex-fill': computedFill.value,\n        'd-flex': computedFill.value && !dis,\n      },\n      classVal,\n    ],\n    role,\n    'aria-hidden': hidden,\n  },\n  button: {\n    'is': dis ? 'span' : 'button',\n    'class': ['page-link', 'text-center', {'flex-grow-1': !dis && computedFill.value}],\n    'aria-label': label,\n    'aria-controls': props.ariaControls || undefined,\n    'aria-disabled': dis ? true : undefined,\n    'aria-posinset': position,\n    'aria-setsize': position ? numberOfPages.value : undefined,\n    'role': 'menuitem',\n    'type': dis ? undefined : 'button',\n    'tabindex': dis ? undefined : tabIndex,\n  },\n  text: {\n    name: slotName,\n    active: isActive,\n    value: textValue ?? page,\n    page,\n    disabled: dis,\n    index: page - 1,\n    content: textValue ? undefined : page,\n  },\n  clickHandler: (e: Readonly<MouseEvent>) => pageClick(e, page),\n})\n\nconst getButtonProps = ({\n  page,\n  classVal,\n  dis,\n  slotName,\n  textValue,\n  label,\n}: {\n  page: number\n  dis: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  label: string\n}) => getBaseButtonProps({page, classVal, dis, slotName, textValue, label, tabIndex: '-1'})\n\nconst getPageButtonProps = (page: number) =>\n  getBaseButtonProps({\n    page,\n    dis: props.disabled,\n    classVal: props.pageClass,\n    slotName: 'page',\n    label: props.labelPage ? `${props.labelPage} ${page}` : undefined,\n    tabIndex: getTabIndex(page) ?? undefined,\n    position: page,\n    isActive: isActivePage(page),\n  })\n\nconst firstButtonProps = computed(() =>\n  getButtonProps({\n    page: 1,\n    dis: firstDisabled.value,\n    classVal: props.firstClass,\n    slotName: 'first-text',\n    textValue: props.firstText,\n    label: props.labelFirstPage,\n  })\n)\nconst prevButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.max(modelValueNumber.value - 1, 1),\n    dis: prevDisabled.value,\n    classVal: props.prevClass,\n    slotName: 'prev-text',\n    textValue: props.prevText,\n    label: props.labelPrevPage,\n  })\n)\nconst nextButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.min(modelValueNumber.value + 1, numberOfPages.value),\n    dis: nextDisabled.value,\n    classVal: props.nextClass,\n    slotName: 'next-text',\n    textValue: props.nextText,\n    label: props.labelNextPage,\n  })\n)\nconst lastButtonProps = computed(() =>\n  getButtonProps({\n    page: numberOfPages.value,\n    dis: lastDisabled.value,\n    classVal: props.lastClass,\n    slotName: 'last-text',\n    textValue: props.lastText,\n    label: props.labelLastPage,\n  })\n)\n\nconst ellipsisProps = computed(() => ({\n  li: {\n    class: [\n      'page-item',\n      'disabled',\n      'text-center',\n      'bv-d-xs-down-none',\n      computedFill.value ? 'flex-fill' : '',\n      props.ellipsisClass,\n    ],\n    role: 'separator',\n  },\n  span: {\n    class: ['page-link'],\n  },\n}))\n\nconst computedWrapperClasses = computed(() => [\n  alignment.value,\n  {\n    [`pagination-${props.size}`]: props.size !== undefined,\n    'b-pagination-pills': props.pills,\n  },\n])\n\nconst pagination = computed(() => ({\n  pageSize: perPageSanitized.value,\n  totalRows: totalRowsNumber.value,\n  numberOfPages: numberOfPages.value,\n}))\n\nconst pageClick = (event: Readonly<MouseEvent>, pageNumber: number) => {\n  if (pageNumber === modelValueNumber.value) return\n\n  const clickEvent = new BvEvent('page-click', {\n    cancelable: true,\n    target: event.target,\n  })\n  emit('page-click', clickEvent, pageNumber)\n\n  if (clickEvent.defaultPrevented) return\n\n  modelValue.value = pageNumber\n\n  //    nextTick(() => {\n  //  if (isVisible(target) && un_element.contains(target)) {\n  //  attemptFocus(target)\n  //} else {\n  //this.focusCurrent()\n  //}\n  // })\n}\n\nwatch(modelValueNumber, (newValue) => {\n  const sanitizeCurrentPage = (value: number, numberOfPages: number) => {\n    const page = value || 1\n    return page > numberOfPages ? numberOfPages : page < 1 ? 1 : page\n  }\n  const calculatedValue = sanitizeCurrentPage(newValue, numberOfPages.value)\n  if (calculatedValue === modelValue.value) return\n  modelValue.value = calculatedValue\n})\n\nwatch(pagination, (oldValue, newValue) => {\n  if (newValue.pageSize !== oldValue.pageSize && newValue.totalRows === oldValue.totalRows) {\n    // If the page size changes, reset to page 1\n    modelValue.value = 1\n  } else if (\n    newValue.numberOfPages !== oldValue.numberOfPages &&\n    modelValueNumber.value > newValue.numberOfPages\n  ) {\n    // If `numberOfPages` changes and is less than\n    // the `currentPage` number, reset to page 1\n    modelValue.value = 1\n  }\n})\n\nconst pages = computed(\n  () =>\n    elements.value.map((p) => {\n      switch (p) {\n        case FIRST_BUTTON:\n          return {id: p, ...firstButtonProps.value}\n        case PREV_BUTTON:\n          return {id: p, ...prevButtonProps.value}\n        case NEXT_BUTTON:\n          return {id: p, ...nextButtonProps.value}\n        case LAST_BUTTON:\n          return {id: p, ...lastButtonProps.value}\n        case FIRST_ELLIPSIS:\n        case LAST_ELLIPSIS:\n          return {id: p, ...ellipsisProps.value}\n        default:\n          return {id: p, ...getPageButtonProps(p)}\n      }\n    }) as PageButton[]\n)\n\nconst elements = computed(() => {\n  // The idea here is to create an array of all the buttons on the page control.\n  // This way we can keep the invariants in one place and the template code just\n  // iterates over the array.\n\n  const pages = numberOfPages.value\n  const {value} = modelValueNumber\n  const limit = limitNumber.value\n  const firstPage = props.firstNumber ? 1 : 0\n  const lastPage = props.lastNumber ? 1 : 0\n  const hideEllipsis = props.hideEllipsis || limit <= ELLIPSIS_THRESHOLD\n  const hideFirstButton = props.hideGotoEndButtons && !props.firstNumber ? 1 : 0\n  const hideLastButton = props.hideGotoEndButtons && !props.lastNumber ? 1 : 0\n  const showFirstButton = hideFirstButton ? 0 : 1\n  const showLastButton = hideLastButton ? 0 : 1\n\n  // The first case is when all of the page buttons fit on the control, this is\n  //  the simplest case and the only one that will create an array smaller than\n  //  Limit + 4 - hideEndButtons * 2 (the [first, last,] prev, next buttons)\n\n  if (pages < limit + firstPage + lastPage) {\n    return [\n      !firstPage && !hideFirstButton ? FIRST_BUTTON : null,\n      PREV_BUTTON,\n      ...Array.from({length: pages}, (_, index) => index + 1),\n      NEXT_BUTTON,\n      !lastPage && !hideLastButton ? LAST_BUTTON : null,\n    ].filter((x) => x !== null) as number[]\n  }\n\n  // All of the remaining cases result in an array that is exactly limit + 4 - hideEndButtons * 2 in length, so create\n  //  the array upfront and set up the beginning and end buttons, then fill the rest for each case\n\n  const buttons = Array.from({length: limit + 4 - (hideFirstButton + hideLastButton)})\n  if (!hideFirstButton) {\n    if (!firstPage) {\n      buttons[0] = FIRST_BUTTON\n      buttons[1] = PREV_BUTTON\n    } else {\n      buttons[0] = PREV_BUTTON\n      buttons[1] = 1\n    }\n  } else {\n    buttons[0] = PREV_BUTTON\n  }\n\n  if (!hideLastButton) {\n    if (!lastPage) {\n      buttons[buttons.length - 1] = LAST_BUTTON\n      buttons[buttons.length - 2] = NEXT_BUTTON\n    } else {\n      buttons[buttons.length - 1] = NEXT_BUTTON\n      buttons[buttons.length - 2] = pages\n    }\n  } else {\n    buttons[buttons.length - 1] = NEXT_BUTTON\n  }\n\n  // The next case is where the page buttons start at the begginning, with\n  //  no ellipsis at the beginning, but one at the end\n\n  const halfLimit = Math.floor(limit / 2)\n  if (value <= halfLimit + firstPage) {\n    for (let index = 1; index <= limit; index++) {\n      buttons[index + 1 - hideFirstButton] = index + firstPage\n    }\n\n    if (!hideEllipsis) {\n      buttons[buttons.length - (2 + showLastButton)] = LAST_ELLIPSIS\n    }\n  }\n\n  // And then we have the case where the page buttons go up to the end, with no\n  //  ellipsis at the end, but one at the beginning\n\n  if (value > pages - halfLimit - lastPage) {\n    const start = pages - (limit - 1) - lastPage\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - hideFirstButton] = start + index\n    }\n\n    if (!hideEllipsis) {\n      buttons[1 + showFirstButton] = FIRST_ELLIPSIS\n    }\n  }\n\n  // Finally we have the case where we have ellipsis at both ends\n  if (!buttons[2]) {\n    // Is there a more elegant way to ceck that we're in the final case?\n    const start = value - Math.floor(limit / 2)\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - hideFirstButton] = start + index\n    }\n\n    if (!hideEllipsis) {\n      buttons[1 + showFirstButton] = FIRST_ELLIPSIS\n      buttons[buttons.length - (2 + showLastButton)] = LAST_ELLIPSIS\n    }\n  }\n\n  //Enable sanity check for debugging purposes\n  // for (let i = 0; i < buttons.length; i++) {\n  //   if (!buttons[i]) {\n  //     // eslint-disable-next-line no-console\n  //     console.log(\n  //       `Failed: button == ${i}, limit=${limit}, pages=${pages}, firstPage=${firstPage}, lastPage=${lastPage}, value=${value}`\n  //     )\n  //   }\n  // }\n\n  return buttons.filter((x) => x !== null) as number[]\n})\n</script>\n\n<script lang=\"ts\">\nconst DEFAULT_PER_PAGE = 20\nconst DEFAULT_TOTAL_ROWS = 0\n</script>\n"],"names":["PREV_BUTTON","NEXT_BUTTON","_props","__props","props","useDefaults","emit","__emit","modelValue","_useModel","limitNumber","useToNumber","limit","nanToZero","method","perPageNumber","perPage","totalRowsNumber","totalRows","modelValueNumber","perPageSanitized","computed","Math","max","value","totalRowsSanitized","numberOfPages","ceil","computedFill","align","justifyAlign","alignment","useAlignment","isActivePage","pageNumber","checkDisabled","num","disabled","firstDisabled","prevDisabled","lastDisabled","nextDisabled","getBaseButtonProps","page","classVal","dis","slotName","textValue","tabIndex","label","position","isActive","role","hidden","li","class","active","button","is","ariaControls","type","tabindex","text","name","index","content","clickHandler","e","pageClick","getButtonProps","firstButtonProps","firstClass","firstText","labelFirstPage","prevButtonProps","prevClass","prevText","labelPrevPage","nextButtonProps","min","nextClass","nextText","labelNextPage","lastButtonProps","lastClass","lastText","labelLastPage","ellipsisProps","ellipsisClass","span","computedWrapperClasses","size","pills","pagination","pageSize","event","clickEvent","BvEvent","cancelable","target","defaultPrevented","newValue","calculatedValue","sanitizeCurrentPage","watch","oldValue","pages","elements","map","p","id","pageClass","labelPage","firstPage","firstNumber","lastPage","lastNumber","hideEllipsis","hideFirstButton","hideGotoEndButtons","hideLastButton","showFirstButton","showLastButton","Array","from","length","_","filter","x","buttons","halfLimit","floor","start"],"mappings":"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"}