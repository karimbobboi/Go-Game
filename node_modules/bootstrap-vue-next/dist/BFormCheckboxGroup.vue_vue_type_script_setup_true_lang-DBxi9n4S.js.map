{"version":3,"file":"BFormCheckboxGroup.vue_vue_type_script_setup_true_lang-DBxi9n4S.js","sources":["../src/components/BFormCheckbox/BFormCheckbox.vue","../src/components/BFormCheckbox/BFormCheckboxGroup.vue"],"sourcesContent":["<template>\n  <ConditionalWrapper\n    :skip=\"isButtonGroup\"\n    v-bind=\"props.wrapperAttrs\"\n    :class=\"computedWrapperClasses\"\n  >\n    <input\n      :id=\"computedId\"\n      ref=\"input\"\n      v-model=\"localValue\"\n      :class=\"computedInputClasses\"\n      type=\"checkbox\"\n      :disabled=\"props.disabled || parentData?.disabled.value\"\n      :required=\"computedRequired || undefined\"\n      :name=\"props.name || parentData?.name.value\"\n      :form=\"props.form || parentData?.form.value\"\n      :aria-label=\"props.ariaLabel\"\n      :aria-labelledby=\"props.ariaLabelledby\"\n      :aria-required=\"computedRequired || undefined\"\n      :value=\"props.value\"\n      :true-value=\"props.value\"\n      :false-value=\"props.uncheckedValue\"\n      :indeterminate.attr=\"indeterminate || undefined\"\n      v-bind=\"inputAttrs\"\n    />\n    <label v-if=\"hasDefaultSlot || props.plain === false\" :for=\"computedId\" :class=\"labelClasses\">\n      <slot />\n    </label>\n  </ConditionalWrapper>\n</template>\n\n<script setup lang=\"ts\">\nimport {useFocus} from '@vueuse/core'\nimport {computed, inject, ref, useAttrs} from 'vue'\nimport {getClasses, getInputClasses, getLabelClasses} from '../../composables/useFormCheck'\nimport type {BFormCheckboxProps} from '../../types/ComponentProps'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport ConditionalWrapper from '../ConditionalWrapper.vue'\nimport {isEmptySlot} from '../../utils/dom'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {CheckboxValue} from '../../types/CheckboxTypes'\nimport {useId} from '../../composables/useId'\n\ndefineOptions({\n  inheritAttrs: false,\n})\n\nconst {class: wrapperClass, ...inputAttrs} = useAttrs()\n\nconst _props = withDefaults(\n  defineProps<Omit<BFormCheckboxProps, 'modelValue' | 'indeterminate'>>(),\n  {\n    wrapperAttrs: undefined,\n    inputClass: undefined,\n    ariaLabel: undefined,\n    ariaLabelledby: undefined,\n    autofocus: false,\n    button: false,\n    buttonGroup: false,\n    buttonVariant: null,\n    disabled: false,\n    form: undefined,\n    id: undefined,\n    inline: false,\n    name: undefined,\n    plain: false,\n    required: undefined,\n    reverse: false,\n    size: undefined,\n    state: null,\n    switch: false,\n    uncheckedValue: false,\n    value: true,\n  }\n)\nconst props = useDefaults(_props, 'BFormCheckbox')\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst modelValue = defineModel<BFormCheckboxProps['modelValue']>({\n  default: undefined,\n})\nconst indeterminate = defineModel<Exclude<BFormCheckboxProps['indeterminate'], undefined>>(\n  'indeterminate',\n  {\n    default: false,\n  }\n)\n\nconst computedId = useId(() => props.id, 'form-check')\n\nconst parentData = inject(checkboxGroupKey, null)\n\nconst input = ref<HTMLElement | null>(null)\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst hasDefaultSlot = computed(() => !isEmptySlot(slots.default))\n\nconst localValue = computed({\n  get: () => (parentData ? parentData.modelValue.value : modelValue.value),\n  set: (newVal) => {\n    if (newVal === undefined) return\n    // Indeterminate is implicitly cleared when the checked state is changed to any value\n    //  by the user.  We reflect that here by setting our indetermiate model to false\n    //  which will emit the indeterminate event to the parent\n    indeterminate.value = false\n    if (parentData !== null && Array.isArray(newVal)) {\n      // The type cast isn't perfect. Array.isArray detects CheckboxValue.unknown[],\n      // but since it's parentData, it should always be CheckboxValue[]\n      // It doesn't quite work when props.value is an [], but this is more of a Vue issue\n      parentData.modelValue.value = newVal as CheckboxValue[]\n      return\n    }\n    modelValue.value = newVal as CheckboxValue\n  },\n})\n\nconst computedRequired = computed(\n  () => !!(props.name ?? parentData?.name.value) && (props.required || parentData?.required.value)\n)\n\nconst isButtonGroup = computed(() => props.buttonGroup || (parentData?.buttons.value ?? false))\n\nconst classesObject = computed(() => ({\n  plain: props.plain || (parentData?.plain.value ?? false),\n  button: props.button || (parentData?.buttons.value ?? false),\n  inline: props.inline || (parentData?.inline.value ?? false),\n  reverse: props.reverse || (parentData?.reverse.value ?? false),\n  switch: props.switch || (parentData?.switch.value ?? false),\n  state:\n    props.state === true || props.state === false ? props.state : (parentData?.state.value ?? null),\n  size: props.size ?? parentData?.size.value ?? 'md', // This is where the true default is made\n  buttonVariant: props.buttonVariant ?? parentData?.buttonVariant.value ?? 'secondary', // This is where the true default is made\n  hasDefaultSlot: hasDefaultSlot.value,\n}))\nconst wrapperClasses = getClasses(classesObject)\nconst computedWrapperClasses = computed(() => [wrapperClasses.value, wrapperClass])\nconst inputClasses = getInputClasses(classesObject)\nconst computedInputClasses = computed(() => [inputClasses.value, props.inputClass])\nconst labelClasses = getLabelClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n","<template>\n  <div\n    v-bind=\"computedAttrs\"\n    :id=\"computedId\"\n    ref=\"element\"\n    role=\"group\"\n    :class=\"computedClasses\"\n    class=\"bv-no-focus-ring\"\n    tabindex=\"-1\"\n  >\n    <slot name=\"first\" />\n    <BFormCheckbox v-for=\"item in normalizeOptions\" :key=\"item.self\" v-bind=\"item.props\">\n      <!-- eslint-disable-next-line vue/no-v-html -->\n      <span v-if=\"!!item.html\" v-html=\"item.html\" />\n      <template v-else>\n        {{ item.text }}\n      </template>\n    </BFormCheckbox>\n    <slot />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed, provide, ref, toRef} from 'vue'\nimport BFormCheckbox from './BFormCheckbox.vue'\nimport {checkboxGroupKey} from '../../utils/keys'\nimport {useFocus} from '@vueuse/core'\nimport type {BFormCheckboxGroupProps} from '../../types/ComponentProps'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {getGroupAttr, getGroupClasses} from '../../composables/useFormCheck'\n\nconst _props = withDefaults(defineProps<Omit<BFormCheckboxGroupProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  buttonVariant: 'secondary',\n  buttons: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  htmlField: 'html',\n  id: undefined,\n  name: undefined,\n  options: () => [],\n  plain: false,\n  required: false,\n  reverse: false,\n  size: 'md',\n  stacked: false,\n  state: null,\n  switches: false,\n  textField: 'text',\n  validated: false,\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormCheckboxGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n}>()\n\nconst modelValue = defineModel<Exclude<BFormCheckboxGroupProps['modelValue'], undefined>>({\n  default: () => [],\n})\n\nconst computedId = useId(() => props.id, 'checkbox')\nconst computedName = useId(() => props.name, 'checkbox')\n\nconst element = ref<HTMLElement | null>(null)\n\nconst {focused} = useFocus(element, {\n  initialValue: props.autofocus,\n})\n\nprovide(checkboxGroupKey, {\n  modelValue,\n  switch: toRef(() => props.switches),\n  buttonVariant: toRef(() => props.buttonVariant),\n  form: toRef(() => props.form),\n  name: computedName,\n  state: toRef(() => props.state),\n  plain: toRef(() => props.plain),\n  size: toRef(() => props.size),\n  inline: toRef(() => !props.stacked),\n  reverse: toRef(() => props.reverse),\n  required: toRef(() => props.required),\n  buttons: toRef(() => props.buttons),\n  disabled: toRef(() => props.disabled),\n})\n\nconst normalizeOptions = computed(() =>\n  props.options.map((el, ind) =>\n    typeof el === 'string' || typeof el === 'number'\n      ? {\n          props: {\n            value: el,\n            disabled: props.disabled,\n          },\n          text: el.toString(),\n          html: undefined,\n          self: Symbol(`checkboxGroupOptionItem${ind}`),\n        }\n      : {\n          props: {\n            value: el[props.valueField] as string | number | undefined,\n            disabled: el[props.disabledField] as boolean | undefined,\n            ...(el.props ? el.props : {}),\n          },\n          text: el[props.textField] as string | undefined,\n          html: el[props.htmlField] as string | undefined,\n          self: Symbol(`checkboxGroupOptionItem${ind}`),\n        }\n  )\n)\n\nconst classesObject = computed(() => ({\n  required: props.required,\n  ariaInvalid: props.ariaInvalid,\n  state: props.state,\n  validated: props.validated,\n  buttons: props.buttons,\n  stacked: props.stacked,\n  size: props.size,\n}))\nconst computedAttrs = getGroupAttr(classesObject)\nconst computedClasses = getGroupClasses(classesObject)\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["class","wrapperClass","inputAttrs","useAttrs","_props","__props","props","useDefaults","slots","_useSlots","modelValue","_useModel","indeterminate","useModel","computedId","useId","id","parentData","inject","checkboxGroupKey","input","ref","focused","useFocus","initialValue","autofocus","hasDefaultSlot","computed","isEmptySlot","default","localValue","get","value","set","newVal","Array","isArray","computedRequired","name","required","isButtonGroup","buttonGroup","buttons","classesObject","plain","button","inline","reverse","switch","state","size","buttonVariant","wrapperClasses","getClasses","computedWrapperClasses","inputClasses","getInputClasses","computedInputClasses","inputClass","labelClasses","getLabelClasses","__expose","blur","element","focus","computedName","provide","toRef","switches","form","stacked","disabled","normalizeOptions","options","map","el","ind","text","toString","html","self","Symbol","valueField","disabledField","textField","htmlField","ariaInvalid","validated","computedAttrs","getGroupAttr","computedClasses","getGroupClasses"],"mappings":"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"}