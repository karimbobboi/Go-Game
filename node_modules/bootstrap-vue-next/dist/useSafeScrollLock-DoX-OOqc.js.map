{"version":3,"file":"useSafeScrollLock-DoX-OOqc.js","sources":["../../../node_modules/.pnpm/tabbable@6.2.0/node_modules/tabbable/dist/index.esm.js","../../../node_modules/.pnpm/focus-trap@7.5.4/node_modules/focus-trap/dist/focus-trap.esm.js","../src/composables/useSafeScrollLock.ts","../src/composables/useActivatedFocusTrap.ts","../../../node_modules/.pnpm/@vueuse+integrations@11.0.3_focus-trap@7.5.4_vue@3.5.3_typescript@5.6.2_/node_modules/@vueuse/integrations/useFocusTrap.mjs"],"sourcesContent":["/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n  return tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 7.5.4\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { isFocusable, tabbable, focusable, isTabbable, getTabIndex } from 'tabbable';\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 || onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 || onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 || onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import {\n  computed,\n  type MaybeRefOrGetter,\n  onMounted,\n  onUnmounted,\n  readonly,\n  toRef,\n  toValue,\n  useId,\n  watch,\n} from 'vue'\nimport {useScrollLock} from '@vueuse/core'\n\nlet prevousRightPadding = ''\nconst lockRegistry = new Map()\n\nexport const useSafeScrollLock = (\n  isOpen: MaybeRefOrGetter<boolean>,\n  bodyScroll: MaybeRefOrGetter<boolean>\n) => {\n  const resolvedIsOpen = readonly(toRef(isOpen))\n  const id = useId()\n\n  /**\n   * We use the inverse because bodyScrolling === true means we allow scrolling, while bodyScrolling === false means we disallow\n   */\n  const inverseBodyScrollingValue = computed(() => !toValue(bodyScroll))\n\n  onMounted(() => {\n    lockRegistry.set(id, false)\n    const isLocked = useScrollLock(\n      document.body,\n      resolvedIsOpen.value && inverseBodyScrollingValue.value\n    )\n\n    watch(\n      [resolvedIsOpen, inverseBodyScrollingValue],\n      ([modelVal, bodyVal]) => {\n        const scrollBarGap = window.innerWidth - document.documentElement.clientWidth\n        const hasLocked = Array.from(lockRegistry.values()).some((val) => val === true)\n\n        const myLocked = modelVal && bodyVal\n        lockRegistry.set(id, myLocked)\n\n        if (myLocked && !hasLocked && !isLocked.value) {\n          isLocked.value = true\n          if (scrollBarGap > 0) {\n            prevousRightPadding = document.body.style.paddingRight\n            document.body.style.paddingRight = `${scrollBarGap + prevousRightPadding}px`\n          }\n        }\n        const hasLockedAfter = Array.from(lockRegistry.values()).some((val) => val === true)\n\n        if (hasLocked && !hasLockedAfter) {\n          lockRegistry.set(id, false)\n          isLocked.value = false\n          document.body.style.paddingRight = prevousRightPadding\n        }\n      },\n      {immediate: true}\n    )\n  })\n  onUnmounted(() => {\n    lockRegistry.delete(id)\n  })\n}\n","import {\n  type MaybeRefOrGetter,\n  nextTick,\n  onMounted,\n  readonly,\n  ref,\n  type Ref,\n  toRef,\n  watch,\n} from 'vue'\nimport {useFocusTrap, type UseFocusTrapOptions} from '@vueuse/integrations/useFocusTrap'\nimport {useMutationObserver} from '@vueuse/core'\n\nexport const useActivatedFocusTrap = (\n  {\n    element,\n    isActive,\n    noTrap,\n    fallbackFocus,\n  }: {\n    element: Ref<HTMLElement | null>\n    isActive: MaybeRefOrGetter<boolean>\n    noTrap: MaybeRefOrGetter<boolean>\n    /**\n     * We need this in the case when there are no focusable elements in the trap. So elements that use this need to implement a fallback focus element.\n     *\n     * Use the `needsFallback` ref to check if you can v-if the element or not. So it's not included in the component tree when not needed.\n     */\n    fallbackFocus: {\n      ref: Ref<HTMLElement | null>\n      /**\n       * The fallback focus element needs some specific selector to ensure it's not included when checking for focusable elements\n       */\n      classSelector: string\n    }\n  },\n  focusTrapOpts: UseFocusTrapOptions = {\n    allowOutsideClick: true,\n    fallbackFocus: fallbackFocus.ref.value ?? undefined,\n    escapeDeactivates: false,\n  }\n) => {\n  const resolvedIsActive = readonly(toRef(isActive))\n  const resolvedNoTrap = readonly(toRef(noTrap))\n\n  const checkNeedsFocus = () => {\n    const tabbableElements = element.value?.querySelectorAll(\n      `a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"]):not(.${fallbackFocus.classSelector})`\n    )\n    return !tabbableElements || tabbableElements.length === 0\n  }\n  const needsFallback = ref(checkNeedsFocus())\n  onMounted(() => {\n    useMutationObserver(\n      element,\n      () => {\n        needsFallback.value = checkNeedsFocus()\n      },\n      {childList: true, subtree: true}\n    )\n  })\n\n  const trap = useFocusTrap(element, focusTrapOpts)\n  watch(resolvedIsActive, async (newValue) => {\n    await nextTick()\n    if (newValue && resolvedNoTrap.value === false) {\n      trap.activate()\n    } else {\n      trap.deactivate()\n    }\n  })\n\n  watch(resolvedNoTrap, (newValue) => {\n    if (newValue === true) {\n      trap.deactivate()\n    }\n  })\n\n  return {\n    needsFallback: readonly(needsFallback),\n  }\n}\n","import { unrefElement, tryOnScopeDispose } from '@vueuse/core';\nimport { toValue, notNullish } from '@vueuse/shared';\nimport { ref, computed, watch } from 'vue-demi';\nimport { createFocusTrap } from 'focus-trap';\n\nfunction useFocusTrap(target, options = {}) {\n  let trap;\n  const { immediate, ...focusTrapOptions } = options;\n  const hasFocus = ref(false);\n  const isPaused = ref(false);\n  const activate = (opts) => trap && trap.activate(opts);\n  const deactivate = (opts) => trap && trap.deactivate(opts);\n  const pause = () => {\n    if (trap) {\n      trap.pause();\n      isPaused.value = true;\n    }\n  };\n  const unpause = () => {\n    if (trap) {\n      trap.unpause();\n      isPaused.value = false;\n    }\n  };\n  const targets = computed(() => {\n    const _targets = toValue(target);\n    return (Array.isArray(_targets) ? _targets : [_targets]).map((el) => {\n      const _el = toValue(el);\n      return typeof _el === \"string\" ? _el : unrefElement(_el);\n    }).filter(notNullish);\n  });\n  watch(\n    targets,\n    (els) => {\n      if (!els.length)\n        return;\n      trap = createFocusTrap(els, {\n        ...focusTrapOptions,\n        onActivate() {\n          hasFocus.value = true;\n          if (options.onActivate)\n            options.onActivate();\n        },\n        onDeactivate() {\n          hasFocus.value = false;\n          if (options.onDeactivate)\n            options.onDeactivate();\n        }\n      });\n      if (immediate)\n        activate();\n    },\n    { flush: \"post\" }\n  );\n  tryOnScopeDispose(() => deactivate());\n  return {\n    hasFocus,\n    isPaused,\n    activate,\n    deactivate,\n    pause,\n    unpause\n  };\n}\n\nexport { useFocusTrap };\n"],"names":["candidateSelectors","candidateSelector","join","NoElement","Element","matches","prototype","msMatchesSelector","webkitMatchesSelector","getRootNode","element","_element$getRootNode","call","ownerDocument","isInert","node","lookUp","_node$getAttribute","inertAtt","getAttribute","parentNode","getCandidates","el","includeContainer","filter","candidates","Array","slice","apply","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","length","shift","tagName","assigned","assignedElements","nestedCandidates","children","flatten","push","scopeParent","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","parseInt","getTabIndex","Error","tabIndex","test","_node$getAttribute2","attValue","isContentEditable","sortOrderedTabbables","a","b","documentOrder","isInput","isNonTabbableRadio","type","isRadio","name","radioSet","radioScope","form","queryRadios","window","CSS","escape","err","console","error","message","checked","nodes","i","getCheckedRadio","isTabbableRadio","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","host","_nodeRoot","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","nodeRoot","nodeRootHost","attached","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isNodeAttached","getClientRects","isNodeMatchingSelectorFocusable","disabled","isHiddenInput","some","child","isDetailsWithSummary","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","isScope","candidateTabindex","getSortOrderTabIndex","content","sort","reduce","acc","sortable","concat","isTabbable","focusableCandidateSelector","isFocusable","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","getOwnPropertyDescriptor","enumerable","_objectSpread2","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","key","value","arg","input","hint","prim","Symbol","toPrimitive","res","TypeError","String","Number","_toPrimitive","_toPropertyKey","configurable","writable","activeFocusTraps","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","unpause","isTabEvent","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","_key","getActualTarget","event","target","composedPath","internalTrapStack","createFocusTrap","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","container","tabbableNodes","find","getNodeForOption","optionValue","_len2","_key2","querySelector","getInitialFocusNode","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","bind","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","lastDomTabbableNode","reverse","posTabIndexesFound","nextTabbableNode","forward","nodeIdx","group","g","getActiveElement","tryFocus","focus","preventScroll","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref3","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref4","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","nextNode","stopImmediatePropagation","navAcrossContainers","mruContainerIdx","mruTabIdx","n","checkKey","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","MutationObserver","mutations","mutation","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","prevousRightPadding","lockRegistry","Map","isActive","noTrap","fallbackFocus","focusTrapOpts","ref","resolvedIsActive","readonly","toRef","resolvedNoTrap","checkNeedsFocus","tabbableElements","_a","classSelector","needsFallback","onMounted","index$1","useMutationObserver","immediate","focusTrapOptions","hasFocus","isPaused","opts","targets","computed","_targets","toValue","isArray","_el","unrefElement","notNullish","vue","watch","els","flush","useFocusTrap","async","newValue","nextTick","isOpen","bodyScroll","resolvedIsOpen","id","useId","inverseBodyScrollingValue","set","isLocked","useScrollLock","body","modelVal","bodyVal","scrollBarGap","innerWidth","documentElement","clientWidth","hasLocked","values","val","myLocked","style","paddingRight","hasLockedAfter","onUnmounted","delete"],"mappings":"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","x_google_ignoreList":[0,1,4]}