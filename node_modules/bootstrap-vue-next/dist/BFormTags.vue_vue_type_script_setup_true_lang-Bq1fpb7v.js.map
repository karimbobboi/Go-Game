{"version":3,"file":"BFormTags.vue_vue_type_script_setup_true_lang-Bq1fpb7v.js","sources":["../src/components/BFormTags/BFormTag.vue","../src/components/BFormTags/BFormTags.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"props.tag\"\n    :id=\"computedId\"\n    :title=\"tagText\"\n    class=\"badge b-form-tag d-inline-flex align-items-center mw-100\"\n    :class=\"computedClasses\"\n    :aria-labelledby=\"taglabelId\"\n  >\n    <span :id=\"taglabelId\" class=\"b-form-tag-content flex-grow-1 text-truncate\">\n      <slot>{{ tagText }}</slot>\n    </span>\n    <BCloseButton\n      v-if=\"!props.disabled && !props.noRemove\"\n      aria-keyshortcuts=\"Delete\"\n      :aria-label=\"props.removeLabel\"\n      class=\"b-form-tag-remove\"\n      :aria-describedby=\"taglabelId\"\n      :aria-controls=\"props.id\"\n      @click=\"emit('remove', tagText)\"\n    />\n  </component>\n</template>\n\n<script setup lang=\"ts\">\nimport {computed} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport type {BFormTagProps} from '../../types/ComponentProps'\nimport BCloseButton from '../BButton/BCloseButton.vue'\nimport {useColorVariantClasses} from '../../composables/useColorVariantClasses'\n\nconst _props = withDefaults(defineProps<BFormTagProps>(), {\n  disabled: false,\n  id: undefined,\n  noRemove: false,\n  pill: false,\n  removeLabel: 'Remove tag',\n  tag: 'span',\n  title: undefined,\n  variant: 'secondary',\n})\nconst props = useDefaults(_props, 'BFormTag')\n\nconst emit = defineEmits<{\n  remove: [value: string]\n}>()\n\nconst slots = defineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n\nconst computedId = useId(() => props.id)\n\nconst tagText = computed(\n  () => ((slots.default?.({})[0].children ?? '').toString() || props.title) ?? ''\n)\nconst taglabelId = computed(() => `${computedId.value}taglabel__`)\n\nconst colorClasses = useColorVariantClasses(props)\nconst computedClasses = computed(() => [\n  colorClasses.value,\n  {\n    'rounded-pill': props.pill,\n    'disabled': props.disabled,\n  },\n])\n</script>\n","<template>\n  <div\n    :id=\"computedId\"\n    class=\"b-form-tags form-control h-auto\"\n    :class=\"computedClasses\"\n    role=\"group\"\n    tabindex=\"-1\"\n    @focusin=\"onFocusin\"\n    @focusout=\"emit('focusout', $event)\"\n  >\n    <output\n      :id=\"`${computedId}selected_tags__`\"\n      class=\"visually-hidden\"\n      :for=\"_inputId\"\n      :aria-live=\"focused ? 'polite' : 'off'\"\n      aria-atomic=\"true\"\n      aria-relevant=\"additions text\"\n      >{{ tags.join(', ') }}</output\n    >\n    <div\n      :id=\"`${computedId}removed_tags__`\"\n      role=\"status\"\n      :aria-live=\"focused ? 'assertive' : 'off'\"\n      aria-atomic=\"true\"\n      class=\"visually-hidden\"\n    >\n      ({{ props.tagRemovedLabel }}) {{ lastRemovedTag }}\n    </div>\n\n    <slot v-bind=\"slotAttrs\">\n      <ul\n        :id=\"`${computedId}tag_list__`\"\n        class=\"b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center\"\n      >\n        <template v-for=\"(tag, index) in tags\" :key=\"index\">\n          <slot\n            name=\"tag\"\n            :tag=\"tag\"\n            :tag-class=\"props.tagClass\"\n            :tag-variant=\"props.tagVariant\"\n            :tag-pills=\"props.tagPills\"\n            :remove-tag=\"removeTag\"\n          >\n            <BFormTag\n              :key=\"tag\"\n              :class=\"props.tagClass\"\n              tag=\"li\"\n              :variant=\"props.tagVariant\"\n              :pill=\"props.tagPills\"\n              @remove=\"removeTag\"\n              >{{ tag }}</BFormTag\n            >\n          </slot>\n        </template>\n        <li\n          role=\"none\"\n          aria-live=\"off\"\n          class=\"b-from-tags-field flex-grow-1\"\n          :aria-controls=\"`${computedId}tag_list__`\"\n        >\n          <div role=\"group\" class=\"d-flex\">\n            <input\n              :id=\"_inputId\"\n              ref=\"input\"\n              :disabled=\"props.disabled\"\n              :value=\"inputValue\"\n              :type=\"props.inputType\"\n              :placeholder=\"props.placeholder\"\n              class=\"b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0\"\n              style=\"outline: currentcolor none 0px; min-width: 5rem\"\n              v-bind=\"props.inputAttrs\"\n              :form=\"props.form\"\n              :required=\"props.required || undefined\"\n              :aria-required=\"props.required || undefined\"\n              @input=\"onInput\"\n              @change=\"onChange\"\n              @focus=\"onFocus\"\n              @blur=\"onBlur\"\n            />\n            <button\n              v-if=\"disableAddButton\"\n              type=\"button\"\n              class=\"btn b-form-tags-button py-0\"\n              :class=\"[\n                inputClass,\n                {\n                  [`btn-${props.addButtonVariant}`]: props.addButtonVariant !== null,\n                  'disabled invisible': inputValue.length === 0,\n                },\n              ]\"\n              style=\"font-size: 90%\"\n              :disabled=\"props.disabled || inputValue.length === 0 || isLimitReached\"\n              @click=\"addTag(inputValue)\"\n            >\n              <slot name=\"add-button-text\">{{ props.addButtonText }}</slot>\n            </button>\n          </div>\n        </li>\n      </ul>\n      <div aria-live=\"polite\" aria-atomic=\"true\">\n        <div v-if=\"isInvalid\" class=\"d-block invalid-feedback\">\n          {{ props.invalidTagText }}: {{ inputValue }}\n        </div>\n        <small v-if=\"isDuplicate\" class=\"form-text text-body-secondary\"\n          >{{ props.duplicateTagText }}: {{ inputValue }}</small\n        >\n        <small v-if=\"tags.length === props.limit\" class=\"form-text text-body-secondary\">\n          {{ props.limitTagsText }}</small\n        >\n      </div>\n    </slot>\n    <template v-if=\"props.name\">\n      <input\n        v-for=\"(tag, index) in tags\"\n        :key=\"index\"\n        type=\"hidden\"\n        :name=\"props.name\"\n        :value=\"tag\"\n      />\n    </template>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {onKeyStroke, syncRef, useFocus, useToNumber} from '@vueuse/core'\nimport {computed, ref} from 'vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormTagsProps} from '../../types/ComponentProps'\nimport {escapeRegExpChars} from '../../utils/stringUtils'\nimport BFormTag from './BFormTag.vue'\nimport type {ClassValue} from '../../types/AnyValuedAttributes'\nimport type {ColorVariant} from '../../types/ColorTypes'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\n\nconst _props = withDefaults(defineProps<Omit<BFormTagsProps, 'modelValue'>>(), {\n  addButtonText: 'Add',\n  addButtonVariant: 'outline-secondary',\n  addOnChange: false,\n  autofocus: false,\n  disabled: false,\n  duplicateTagText: 'Duplicate tag(s)',\n  form: undefined,\n  inputAttrs: undefined,\n  inputClass: undefined,\n  inputId: undefined,\n  inputType: 'text',\n  invalidTagText: 'Invalid tag(s)',\n  limit: undefined,\n  limitTagsText: 'Tag limit reached',\n  name: undefined,\n  noAddOnEnter: false,\n  noOuterFocus: false,\n  noTagRemove: false,\n  placeholder: 'Add tag...',\n  removeOnDelete: false,\n  required: false,\n  separator: undefined,\n  size: 'md',\n  state: null,\n  tagClass: undefined,\n  tagPills: false,\n  tagRemoveLabel: undefined,\n  tagRemovedLabel: 'Tag removed',\n  tagValidator: () => true,\n  tagVariant: 'secondary',\n})\nconst props = useDefaults(_props, 'BFormTags')\n\nconst emit = defineEmits<{\n  'blur': [value: FocusEvent]\n  'focus': [value: FocusEvent]\n  'focusin': [value: FocusEvent]\n  'focusout': [value: FocusEvent]\n  'tag-state': [...args: string[][]]\n}>()\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'add-button-text'?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'default'?: (props: typeof slotAttrs.value) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  'tag'?: (props: {\n    tag: string\n    tagClass: ClassValue\n    tagVariant: ColorVariant | null\n    tagPills: boolean\n    removeTag: (tag?: string) => void\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }) => any\n}>()\n\nconst modelValue = defineModel<Exclude<BFormTagsProps['modelValue'], undefined>>({\n  default: () => [],\n})\n\nconst computedId = useId()\n\nconst limitNumber = useToNumber(() => props.limit ?? NaN)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = ref<HTMLInputElement | null>(null)\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst _inputId = computed(() => props.inputId || `${computedId.value}input__`)\nconst tags = ref<string[]>([...modelValue.value])\nconst inputValue = ref<string>('')\nconst shouldRemoveOnDelete = ref<boolean>(modelValue.value.length > 0)\nconst lastRemovedTag = ref<string>('')\nconst validTags = ref<string[]>([])\nconst invalidTags = ref<string[]>([])\nconst duplicateTags = ref<string[]>([])\n\nsyncRef(modelValue, tags, {\n  direction: 'ltr',\n  transform: {\n    ltr: (v) => [...v],\n  },\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    [`form-control-${props.size}`]: props.size !== 'md',\n    disabled: props.disabled,\n    focus: focused.value,\n  },\n])\n\nconst isDuplicate = computed(() => tags.value.includes(inputValue.value))\nconst isInvalid = computed(() =>\n  inputValue.value === '' ? false : !props.tagValidator(inputValue.value)\n)\nconst isLimitReached = computed(() => tags.value.length === limitNumber.value)\nconst disableAddButton = computed(() => !isInvalid.value && !isDuplicate.value)\n\nconst slotAttrs = computed(() => ({\n  addButtonText: props.addButtonText,\n  addButtonVariant: props.addButtonVariant,\n  addTag,\n  disableAddButton: disableAddButton.value,\n  disabled: props.disabled,\n  duplicateTagText: props.duplicateTagText,\n  duplicateTags: duplicateTags.value,\n  form: props.form,\n  inputAttrs: {\n    ...props.inputAttrs,\n    disabled: props.disabled,\n    form: props.form,\n    id: _inputId.value,\n    value: inputValue.value,\n  },\n  inputClass: props.inputClass,\n  inputHandlers: {\n    input: onInput,\n    keydown: onKeydown,\n    change: onChange,\n  },\n  inputId: _inputId.value,\n  inputType: props.inputType,\n  invalidTagText: props.invalidTagText,\n  invalidTags: invalidTags.value,\n  isDuplicate: isDuplicate.value,\n  isInvalid: isInvalid.value,\n  isLimitReached: isLimitReached.value,\n  limitTagsText: props.limitTagsText,\n  limit: limitNumber.value,\n  noTagRemove: props.noTagRemove,\n  placeholder: props.placeholder,\n  removeTag,\n  required: props.required,\n  separator: props.separator,\n  size: props.size,\n  state: props.state,\n  tagClass: props.tagClass,\n  tagPills: props.tagPills,\n  tagRemoveLabel: props.tagRemoveLabel,\n  tagVariant: props.tagVariant,\n  tags: tags.value,\n}))\n\nconst onFocusin = (e: Readonly<FocusEvent>): void => {\n  if (props.disabled) {\n    const target = e.target as HTMLDivElement\n    target.blur()\n    return\n  }\n\n  emit('focusin', e)\n}\n\nconst onFocus = (e: Readonly<FocusEvent>): void => {\n  if (props.disabled || props.noOuterFocus) {\n    return\n  }\n\n  focused.value = true\n  emit('focus', e)\n}\n\nconst onBlur = (e: Readonly<FocusEvent>): void => {\n  focused.value = false\n  emit('blur', e)\n}\n\nconst onInput = (e: Readonly<Event> | string): void => {\n  const value = typeof e === 'string' ? e : (e.target as HTMLInputElement).value\n\n  shouldRemoveOnDelete.value = false\n\n  if (props.separator?.includes(value.charAt(0)) && value.length > 0) {\n    if (input.value) {\n      input.value.value = ''\n    }\n    return\n  }\n\n  inputValue.value = value\n\n  if (props.separator?.includes(value.charAt(value.length - 1))) {\n    addTag(value.slice(0, value.length - 1))\n    return\n  }\n\n  validTags.value = props.tagValidator(value) && !isDuplicate.value ? [value] : []\n  invalidTags.value = props.tagValidator(value) ? [] : [value]\n  duplicateTags.value = isDuplicate.value ? [value] : []\n\n  emit('tag-state', validTags.value, invalidTags.value, duplicateTags.value)\n}\n\nconst onChange = (e: Readonly<Event>): void => {\n  if (props.addOnChange) {\n    onInput(e)\n\n    if (!isDuplicate.value) {\n      addTag(inputValue.value)\n    }\n  }\n}\n\nconst onKeydown = (e: Readonly<KeyboardEvent>): void => {\n  if (e.key === 'Enter' && !props.noAddOnEnter) {\n    addTag(inputValue.value)\n    return\n  }\n\n  if (\n    (e.key === 'Backspace' || e.key === 'Delete') &&\n    props.removeOnDelete &&\n    inputValue.value === '' &&\n    shouldRemoveOnDelete.value &&\n    tags.value.length > 0\n  ) {\n    removeTag(tags.value[tags.value.length - 1])\n  } else {\n    shouldRemoveOnDelete.value = true\n  }\n}\n\nonKeyStroke(onKeydown, {target: input})\n\nconst separator = computed(() => {\n  if (!props.separator) {\n    return\n  }\n\n  return typeof props.separator === 'string' ? props.separator : props.separator.join('')\n})\n\nconst separatorRegExp = computed(() => {\n  if (!separator.value) {\n    return\n  }\n\n  return new RegExp(`[${escapeRegExpChars(separator.value)}]+`)\n})\n\nconst addTag = (tag?: string): void => {\n  tag = (tag ?? inputValue.value).trim()\n\n  const newTags = separatorRegExp.value\n    ? tag.split(separatorRegExp.value).map((t) => t.trim())\n    : [tag]\n  const validTags: string[] = []\n\n  for (const newTag of newTags) {\n    if (newTag === '' || isDuplicate.value || !props.tagValidator(newTag)) {\n      continue\n    }\n\n    if (limitNumber.value && isLimitReached.value) {\n      break\n    }\n\n    validTags.push(newTag)\n  }\n\n  const newValue = [...modelValue.value, ...validTags]\n  inputValue.value = ''\n  shouldRemoveOnDelete.value = true\n  modelValue.value = newValue\n  focused.value = true\n}\n\nconst removeTag = (tag?: string): void => {\n  const tagIndex = tags.value.indexOf(tag?.toString() ?? '')\n  if (tagIndex === -1) return\n  lastRemovedTag.value = tags.value.splice(tagIndex, 1).toString()\n  modelValue.value = tags.value\n}\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["_props","__props","props","useDefaults","emit","__emit","slots","_useSlots","computedId","useId","id","tagText","computed","_a","default","call","children","toString","title","taglabelId","value","colorClasses","useColorVariantClasses","computedClasses","pill","disabled","modelValue","_useModel","limitNumber","useToNumber","limit","NaN","stateClass","useStateClass","state","input","ref","focused","useFocus","initialValue","autofocus","_inputId","inputId","tags","inputValue","shouldRemoveOnDelete","length","lastRemovedTag","validTags","invalidTags","duplicateTags","index","syncRef","direction","transform","ltr","v","size","focus","isDuplicate","includes","isInvalid","tagValidator","isLimitReached","disableAddButton","slotAttrs","addButtonText","addButtonVariant","addTag","duplicateTagText","form","inputAttrs","inputClass","inputHandlers","onInput","keydown","onKeydown","change","onChange","inputType","invalidTagText","limitTagsText","noTagRemove","placeholder","removeTag","required","separator","tagClass","tagPills","tagRemoveLabel","tagVariant","onFocusin","e","target","blur","onFocus","noOuterFocus","onBlur","charAt","_b","slice","addOnChange","key","noAddOnEnter","removeOnDelete","onKeyStroke","join","separatorRegExp","RegExp","escapeRegExpChars","tag","trim","newTags","split","map","t","newTag","push","newValue","tagIndex","indexOf","splice","__expose","element"],"mappings":"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"}