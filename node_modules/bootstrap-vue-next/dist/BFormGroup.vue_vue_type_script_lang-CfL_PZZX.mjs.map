{"version":3,"file":"BFormGroup.vue_vue_type_script_lang-CfL_PZZX.mjs","sources":["../src/utils/props.ts","../src/utils/normalizeSlot.ts","../src/components/BFormGroup/BFormGroup.vue"],"sourcesContent":["// Suffix can be a falsey value so nothing is appended to string\n// (helps when looping over props & some shouldn't change)\n\nimport {upperFirst} from './stringUtils'\n\n/**\n * Use data last parameters to allow for currying\n *\n * @param suffix\n * @param value\n * @returns\n */\nexport const suffixPropName = (suffix: string, value: string): string =>\n  value + (suffix ? upperFirst(suffix) : '')\n","import type {Slots, VNode} from 'vue'\n\nexport const normalizeSlot = (name: string, scope = {}, $slots: Slots = {}): VNode => {\n  // Ensure names is an array\n  const names = [name]\n  let slot\n  for (let i = 0; i < names.length && !slot; i++) {\n    const name = names[i]\n    slot = $slots[name]\n  }\n  // Note: in Vue 3.x, slots have been unified. No more scoped slots and all slots are exposed as functions\n  return (slot && typeof slot === 'function' ? slot(scope) : slot) as unknown as VNode\n}\n","<script lang=\"ts\">\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {RX_SPACE_SPLIT} from '../../utils/constants'\nimport {attemptFocus, isVisible} from '../../utils/dom'\nimport {computed, defineComponent, h, nextTick, onMounted, type PropType, ref, watch} from 'vue'\nimport BCol from '../BContainer/BCol.vue'\nimport BFormInvalidFeedback from '../BForm/BFormInvalidFeedback.vue'\nimport BFormRow from '../BForm/BFormRow.vue'\nimport BFormText from '../BForm/BFormText.vue'\nimport BFormValidFeedback from '../BForm/BFormValidFeedback.vue'\nimport type {AriaInvalid} from '../../types/AriaInvalid'\nimport {suffixPropName} from '../../utils/props'\nimport {IS_BROWSER} from '../../utils/event'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useId} from '../../composables/useId'\nimport {normalizeSlot} from '../../utils/normalizeSlot'\n\nconst INPUTS = ['input', 'select', 'textarea']\n// Selector for finding first input in the form group\nconst INPUT_SELECTOR = INPUTS.map((v) => `${v}:not([disabled])`).join()\n\n// A list of interactive elements (tag names) inside `<BFormGroup>`'s legend\nconst LEGEND_INTERACTIVE_ELEMENTS = [...INPUTS, 'a', 'button', 'label']\n\nexport const SLOT_NAME_LABEL = 'label'\nexport const SLOT_NAME_INVALID_FEEDBACK = 'invalid-feedback'\nexport const SLOT_NAME_VALID_FEEDBACK = 'valid-feedback'\nexport const SLOT_NAME_DESCRIPTION = 'description'\nexport const SLOT_NAME_DEFAULT = 'default'\n\nexport default defineComponent({\n  components: {BCol, BFormInvalidFeedback, BFormRow, BFormText, BFormValidFeedback},\n  props: {\n    ariaInvalid: {type: [Boolean, String] as PropType<AriaInvalid>, default: undefined},\n    contentCols: {type: [Boolean, String, Number], default: undefined},\n    contentColsLg: {type: [Boolean, String, Number], default: undefined},\n    contentColsMd: {type: [Boolean, String, Number], default: undefined},\n    contentColsSm: {type: [Boolean, String, Number], default: undefined},\n    contentColsXl: {type: [Boolean, String, Number], default: undefined},\n    description: {type: [String], default: undefined},\n    disabled: {type: Boolean, default: false},\n    feedbackAriaLive: {type: String, default: 'assertive'},\n    floating: {type: Boolean, default: false},\n    id: {type: String, default: undefined},\n    invalidFeedback: {type: String, default: undefined},\n    label: {type: String, default: undefined},\n    labelAlign: {type: [String], default: undefined},\n    labelAlignLg: {type: [String], default: undefined},\n    labelAlignMd: {type: [String], default: undefined},\n    labelAlignSm: {type: [String], default: undefined},\n    labelAlignXl: {type: [String], default: undefined},\n    labelClass: {type: [Array, Object, String], default: undefined},\n    labelCols: {type: [Boolean, String, Number], default: undefined},\n    labelColsLg: {type: [Boolean, String, Number], default: undefined},\n    labelColsMd: {type: [Boolean, String, Number], default: undefined},\n    labelColsSm: {type: [Boolean, String, Number], default: undefined},\n    labelColsXl: {type: [Boolean, String, Number], default: undefined},\n    labelFor: {type: String, default: undefined},\n    labelSize: {type: String, default: undefined},\n    labelVisuallyHidden: {type: Boolean, default: false},\n    state: {type: Boolean as PropType<boolean | null>, default: null},\n    tooltip: {type: Boolean, default: false},\n    validFeedback: {type: String, default: undefined},\n    validated: {type: Boolean, default: false},\n  },\n  setup(props) {\n    const ariaDescribedby: string | null = null as string | null\n    const breakPoints = ['xs', 'sm', 'md', 'lg', 'xl']\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const getAlignClasses = (props: any, prefix: string) =>\n      breakPoints.reduce((result: string[], breakpoint) => {\n        const suffix = suffixPropName(breakpoint === 'xs' ? '' : breakpoint, `${prefix}Align`)\n        const propValue: string = props[suffix] || null\n        if (propValue) {\n          breakpoint === 'xs'\n            ? result.push(`text-${propValue}`)\n            : result.push(`text-${breakpoint}-${propValue}`)\n        }\n\n        return result\n      }, [])\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const getColProps = (props: any, prefix: string) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      breakPoints.reduce((result: any, breakpoint: string) => {\n        const suffix = suffixPropName(breakpoint === 'xs' ? '' : breakpoint, `${prefix}Cols`)\n        let propValue = props[suffix]\n        // Handle case where the prop's value is an empty string,\n        // which represents `true`\n        propValue = propValue === '' ? true : propValue || false\n\n        if (!(typeof propValue === 'boolean') && propValue !== 'auto') {\n          // Convert to column size to number\n          const val = Number.parseInt(propValue)\n          propValue = Number.isNaN(val) ? 0 : val\n          // Ensure column size is greater than `0`\n          propValue = propValue > 0 ? propValue : false\n        }\n\n        // Add the prop to the list of props to give to `</BCol>`\n        // If breakpoint is '' (`${prefix}Cols` is `true`), then we use\n        // the 'col' prop to make equal width at 'xs'\n        if (propValue) {\n          // Extra care is required for xs since it does not have a BCol breakpoint prop\n          // Xs breakpoint is simply 'cols'\n          if (breakpoint === 'xs') {\n            result[typeof propValue === 'boolean' ? 'col' : 'cols'] = propValue\n          } else {\n            result[breakpoint || (typeof propValue === 'boolean' ? 'col' : 'cols')] = propValue\n          }\n        }\n        return result\n      }, {})\n\n    const content = ref<HTMLElement | null>(null)\n\n    // Sets the `aria-describedby` attribute on the input if `labelFor` is set\n    // Optionally accepts a string of Ids to remove as the second parameter\n    // Preserves any `aria-describedby` value(s) user may have on input\n    const updateAriaDescribedby = (newValue: string | null, oldValue: string | null = null) => {\n      if (IS_BROWSER && props.labelFor && content.value !== null) {\n        // We need to escape `labelFor` since it can be user-provided\n        const $input = content.value.querySelector(`#${CSS.escape(props.labelFor)}`)\n        if ($input) {\n          const attr = 'aria-describedby'\n          const newIds = (newValue || '').split(RX_SPACE_SPLIT)\n          const oldIds = (oldValue || '').split(RX_SPACE_SPLIT)\n\n          // Update Id list, preserving any original Ids\n          // and ensuring the Id's are unique\n          const ids = ($input.getAttribute(attr) || '')\n            .split(RX_SPACE_SPLIT)\n            .filter((id) => !oldIds.includes(id))\n            .concat(newIds)\n            .filter((id, index, ids) => ids.indexOf(id) === index)\n            .filter((x) => x)\n            .join(' ')\n            .trim()\n\n          if (ids) {\n            $input.setAttribute(attr, ids)\n          } else {\n            $input.removeAttribute(attr)\n          }\n        }\n      }\n    }\n\n    const contentColProps = computed(() => getColProps(props, 'content'))\n    const labelAlignClasses = computed(() => getAlignClasses(props, 'label'))\n    const labelColProps = computed(() => getColProps(props, 'label'))\n    const isHorizontal = computed(\n      () =>\n        // Determine if the form group will be rendered horizontal\n        // based on the existence of 'content-col' or 'label-col' props\n        Object.keys(contentColProps.value).length > 0 || Object.keys(labelColProps.value).length > 0\n    )\n\n    const stateClass = useStateClass(() => props.state)\n\n    const computedAriaInvalid = useAriaInvalid(\n      () => props.ariaInvalid,\n      () => props.state\n    )\n\n    watch(\n      () => ariaDescribedby,\n      (newValue: string | null, oldValue: string | null) => {\n        if (newValue !== oldValue) {\n          updateAriaDescribedby(newValue, oldValue)\n        }\n      }\n    )\n\n    onMounted(() => {\n      nextTick(() => {\n        // Set `aria-describedby` on the input specified by `labelFor`\n        // We do this in a `$nextTick()` to ensure the children have finished rendering\n        updateAriaDescribedby(ariaDescribedby)\n      })\n    })\n\n    const onLegendClick = (event: Readonly<MouseEvent>) => {\n      // Don't do anything if `labelFor` is set\n      if (props.labelFor || content.value === null) return\n\n      const {target} = event\n      const tagName = target ? (target as HTMLElement).tagName : ''\n\n      // If clicked an interactive element inside legend,\n      // we just let the default happen\n      if (LEGEND_INTERACTIVE_ELEMENTS.indexOf(tagName) !== -1) return\n\n      // If only a single input, focus it, emulating label behaviour\n      const inputs = [...content.value.querySelectorAll(INPUT_SELECTOR)].filter(isVisible)\n      const [inp] = inputs\n      if (inputs.length === 1 && inp instanceof HTMLElement) {\n        attemptFocus(inp)\n      }\n    }\n\n    return {\n      ariaDescribedby,\n      computedAriaInvalid,\n      contentColProps,\n      isHorizontal,\n      labelAlignClasses,\n      labelColProps,\n      onLegendClick,\n      stateClass,\n    }\n  },\n  render() {\n    const props = this.$props\n    const slots = this.$slots\n\n    const id = useId()\n    const isFieldset = !props.labelFor\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let $label: any = null\n    const labelContent = normalizeSlot(SLOT_NAME_LABEL, {}, slots) || props.label\n    const labelId = labelContent ? useId(undefined, '_BV_label_').value : null\n\n    if (labelContent || this.isHorizontal) {\n      const labelTag: 'legend' | 'label' = isFieldset ? 'legend' : 'label'\n      if (props.labelVisuallyHidden) {\n        if (labelContent) {\n          $label = h(\n            labelTag,\n            {\n              class: 'visually-hidden',\n              id: labelId,\n              for: props.labelFor || null,\n            },\n            labelContent\n          )\n        }\n        if (this.isHorizontal) {\n          $label = h(BCol, this.labelColProps, {default: () => $label})\n        } else {\n          $label = h('div', {}, [$label])\n        }\n      } else {\n        const renderProps = {\n          onClick: isFieldset ? this.onLegendClick : null,\n          ...(this.isHorizontal ? this.labelColProps : {}),\n          tag: this.isHorizontal ? labelTag : null,\n          id: labelId,\n          for: props.labelFor || null,\n          tabIndex: isFieldset ? '-1' : null,\n          class: [\n            this.isHorizontal ? 'col-form-label' : 'form-label',\n            {\n              'bv-no-focus-ring': isFieldset,\n              'col-form-label': this.isHorizontal || isFieldset,\n              'pt-0': !this.isHorizontal && isFieldset,\n              'd-block': !this.isHorizontal && !isFieldset,\n              [`col-form-label-${props.labelSize}`]: !!props.labelSize,\n            },\n            this.labelAlignClasses,\n            props.labelClass,\n          ],\n        }\n        if (this.isHorizontal) {\n          $label = h(BCol, renderProps, {default: () => labelContent})\n        } else {\n          $label = h(labelTag, renderProps, labelContent)\n        }\n      }\n    }\n\n    let $invalidFeedback = null\n    const invalidFeedbackContent =\n      normalizeSlot(SLOT_NAME_INVALID_FEEDBACK, {}, slots) || this.invalidFeedback\n    const invalidFeedbackId = invalidFeedbackContent\n      ? useId(undefined, '_BV_feedback_invalid_').value\n      : undefined\n\n    if (invalidFeedbackContent) {\n      $invalidFeedback = h(\n        BFormInvalidFeedback,\n        {\n          ariaLive: props.feedbackAriaLive,\n          id: invalidFeedbackId,\n          state: props.state,\n          tooltip: props.tooltip,\n        },\n        {default: () => invalidFeedbackContent}\n      )\n    }\n\n    let $validFeedback = null\n    const validFeedbackContent =\n      normalizeSlot(SLOT_NAME_VALID_FEEDBACK, {}, slots) || this.validFeedback\n    const validFeedbackId = validFeedbackContent\n      ? useId(undefined, '_BV_feedback_valid_').value\n      : undefined\n\n    if (validFeedbackContent) {\n      $validFeedback = h(\n        BFormValidFeedback,\n        {\n          ariaLive: props.feedbackAriaLive,\n          id: validFeedbackId,\n          state: props.state,\n          tooltip: props.tooltip,\n        },\n        {default: () => validFeedbackContent}\n        // validFeedbackContent\n      )\n    }\n\n    let $description = null\n    const descriptionContent = normalizeSlot(SLOT_NAME_DESCRIPTION, {}, slots) || this.description\n    const descriptionId = descriptionContent\n      ? useId(undefined, '_BV_description_').value\n      : undefined\n    if (descriptionContent) {\n      $description = h(\n        BFormText,\n        {\n          id: descriptionId,\n        },\n        {default: () => descriptionContent}\n      )\n    }\n\n    // Update `ariaDescribedby`\n    // Screen readers will read out any content linked to by `aria-describedby`\n    // even if the content is hidden with `display: none;`, hence we only include\n    // feedback Ids if the form group's state is explicitly valid or invalid\n    const ariaDescribedby = (this.ariaDescribedby =\n      [\n        descriptionId,\n        props.state === false ? invalidFeedbackId : null,\n        props.state === true ? validFeedbackId : null,\n      ]\n        .filter((x) => x)\n        .join(' ') || null)\n\n    const contentBlocks = [\n      normalizeSlot(SLOT_NAME_DEFAULT, {ariaDescribedby, descriptionId, id, labelId}, slots) || '',\n      $invalidFeedback,\n      $validFeedback,\n      $description,\n    ]\n    if (!this.isHorizontal && props.floating) contentBlocks.push($label)\n\n    let $content = h(\n      'div',\n      {\n        ref: 'content',\n        class: [\n          {\n            'form-floating': !this.isHorizontal && props.floating,\n          },\n        ],\n      },\n      contentBlocks\n    )\n    if (this.isHorizontal) {\n      $content = h(BCol, {ref: 'content', ...this.contentColProps}, {default: () => contentBlocks})\n    }\n\n    // Return it wrapped in a form group\n    // Note: Fieldsets do not support adding `row` or `form-row` directly\n    // to them due to browser specific render issues, so we move the `form-row`\n    // to an inner wrapper div when horizontal and using a fieldset\n    const rowProps = {\n      'class': [\n        this.stateClass,\n        {\n          'was-validated': props.validated,\n        },\n      ],\n      'id': useId(() => props.id).value,\n      'disabled': isFieldset ? props.disabled : null,\n      'role': isFieldset ? null : 'group',\n      'aria-invalid': this.computedAriaInvalid,\n      // Only apply `aria-labelledby` if we are a horizontal fieldset\n      // as the legend is no longer a direct child of fieldset\n      'aria-labelledby': isFieldset && this.isHorizontal ? labelId : null,\n    }\n\n    if (this.isHorizontal && !isFieldset) {\n      return h(BFormRow, rowProps, {default: () => [$label, $content]})\n    }\n\n    return h(\n      isFieldset ? 'fieldset' : 'div',\n      rowProps,\n      this.isHorizontal && isFieldset\n        ? [h(BFormRow, null, {default: () => [$label, $content]})]\n        : this.isHorizontal || !props.floating\n          ? [$label, $content]\n          : [$content]\n    )\n  },\n})\n</script>\n"],"names":["name","BCol","BFormInvalidFeedback","BFormRow","BFormText","BFormValidFeedback","props","ids"],"mappings":";;;;;;;;;;AAYa,MAAA,iBAAiB,CAAC,QAAgB,UAC7C,SAAS,SAAS,WAAW,MAAM,IAAI;ACX5B,MAAA,gBAAgB,CAAC,MAAc,QAAQ,CAAA,GAAI,SAAgB,CAAA,MAAc;AAE9E,QAAA,QAAQ,CAAC,IAAI;AACf,MAAA;AACJ,WAAS,IAAI,GAAG,IAAI,MAAM,UAAU,CAAC,MAAM,KAAK;AACxCA,UAAAA,QAAO,MAAM,CAAC;AACpB,WAAO,OAAOA,KAAI;AAAA,EACpB;AAEA,SAAQ,QAAQ,OAAO,SAAS,aAAa,KAAK,KAAK,IAAI;AAC7D;ACKA,MAAM,SAAS,CAAC,SAAS,UAAU,UAAU;AAE7C,MAAM,iBAAiB,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,kBAAkB,EAAE;AAGjE,MAAM,8BAA8B,CAAC,GAAG,QAAQ,KAAK,UAAU,OAAO;AAE/D,MAAM,kBAAkB;AACxB,MAAM,6BAA6B;AACnC,MAAM,2BAA2B;AACjC,MAAM,wBAAwB;AAC9B,MAAM,oBAAoB;AAEjC,MAAA,YAAe,gBAAgB;AAAA,EAC7B,YAAY,EAACC,MAAAA,aAAMC,sBAAAA,aAAsBC,UAAAA,aAAUC,WAAAA,aAAWC,oBAAAA,YAAkB;AAAA,EAChF,OAAO;AAAA,IACL,aAAa,EAAC,MAAM,CAAC,SAAS,MAAM,GAA4B,SAAS,OAAS;AAAA,IAClF,aAAa,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACjE,eAAe,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACnE,eAAe,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACnE,eAAe,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACnE,eAAe,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACnE,aAAa,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IAChD,UAAU,EAAC,MAAM,SAAS,SAAS,MAAK;AAAA,IACxC,kBAAkB,EAAC,MAAM,QAAQ,SAAS,YAAW;AAAA,IACrD,UAAU,EAAC,MAAM,SAAS,SAAS,MAAK;AAAA,IACxC,IAAI,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IACrC,iBAAiB,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IAClD,OAAO,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IACxC,YAAY,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IAC/C,cAAc,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IACjD,cAAc,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IACjD,cAAc,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IACjD,cAAc,EAAC,MAAM,CAAC,MAAM,GAAG,SAAS,OAAS;AAAA,IACjD,YAAY,EAAC,MAAM,CAAC,OAAO,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IAC9D,WAAW,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IAC/D,aAAa,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACjE,aAAa,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACjE,aAAa,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACjE,aAAa,EAAC,MAAM,CAAC,SAAS,QAAQ,MAAM,GAAG,SAAS,OAAS;AAAA,IACjE,UAAU,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IAC3C,WAAW,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IAC5C,qBAAqB,EAAC,MAAM,SAAS,SAAS,MAAK;AAAA,IACnD,OAAO,EAAC,MAAM,SAAqC,SAAS,KAAI;AAAA,IAChE,SAAS,EAAC,MAAM,SAAS,SAAS,MAAK;AAAA,IACvC,eAAe,EAAC,MAAM,QAAQ,SAAS,OAAS;AAAA,IAChD,WAAW,EAAC,MAAM,SAAS,SAAS,MAAK;AAAA,EAC3C;AAAA,EACA,MAAM,OAAO;AACX,UAAM,kBAAiC;AACvC,UAAM,cAAc,CAAC,MAAM,MAAM,MAAM,MAAM,IAAI;AAG3C,UAAA,kBAAkB,CAACC,QAAY,WACnC,YAAY,OAAO,CAAC,QAAkB,eAAe;AAC7C,YAAA,SAAS,eAAe,eAAe,OAAO,KAAK,YAAY,GAAG,MAAM,OAAO;AAC/E,YAAA,YAAoBA,OAAM,MAAM,KAAK;AAC3C,UAAI,WAAW;AACb,uBAAe,OACX,OAAO,KAAK,QAAQ,SAAS,EAAE,IAC/B,OAAO,KAAK,QAAQ,UAAU,IAAI,SAAS,EAAE;AAAA,MACnD;AAEO,aAAA;AAAA,IACT,GAAG,CAAE,CAAA;AAGD,UAAA,cAAc,CAACA,QAAY;AAAA;AAAA,MAE/B,YAAY,OAAO,CAAC,QAAa,eAAuB;AAChD,cAAA,SAAS,eAAe,eAAe,OAAO,KAAK,YAAY,GAAG,MAAM,MAAM;AAChF,YAAA,YAAYA,OAAM,MAAM;AAGhB,oBAAA,cAAc,KAAK,OAAO,aAAa;AAEnD,YAAI,EAAE,OAAO,cAAc,cAAc,cAAc,QAAQ;AAEvD,gBAAA,MAAM,OAAO,SAAS,SAAS;AACrC,sBAAY,OAAO,MAAM,GAAG,IAAI,IAAI;AAExB,sBAAA,YAAY,IAAI,YAAY;AAAA,QAC1C;AAKA,YAAI,WAAW;AAGb,cAAI,eAAe,MAAM;AACvB,mBAAO,OAAO,cAAc,YAAY,QAAQ,MAAM,IAAI;AAAA,UAAA,OACrD;AACL,mBAAO,eAAe,OAAO,cAAc,YAAY,QAAQ,OAAO,IAAI;AAAA,UAC5E;AAAA,QACF;AACO,eAAA;AAAA,MACT,GAAG,EAAE;AAAA;AAED,UAAA,UAAU,IAAwB,IAAI;AAK5C,UAAM,wBAAwB,CAAC,UAAyB,WAA0B,SAAS;AACzF,UAAI,cAAc,MAAM,YAAY,QAAQ,UAAU,MAAM;AAEpD,cAAA,SAAS,QAAQ,MAAM,cAAc,IAAI,IAAI,OAAO,MAAM,QAAQ,CAAC,EAAE;AAC3E,YAAI,QAAQ;AACV,gBAAM,OAAO;AACb,gBAAM,UAAU,YAAY,IAAI,MAAM,cAAc;AACpD,gBAAM,UAAU,YAAY,IAAI,MAAM,cAAc;AAIpD,gBAAM,OAAO,OAAO,aAAa,IAAI,KAAK,IACvC,MAAM,cAAc,EACpB,OAAO,CAAC,OAAO,CAAC,OAAO,SAAS,EAAE,CAAC,EACnC,OAAO,MAAM,EACb,OAAO,CAAC,IAAI,OAAOC,SAAQA,KAAI,QAAQ,EAAE,MAAM,KAAK,EACpD,OAAO,CAAC,MAAM,CAAC,EACf,KAAK,GAAG,EACR;AAEH,cAAI,KAAK;AACA,mBAAA,aAAa,MAAM,GAAG;AAAA,UAAA,OACxB;AACL,mBAAO,gBAAgB,IAAI;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IAAA;AAGF,UAAM,kBAAkB,SAAS,MAAM,YAAY,OAAO,SAAS,CAAC;AACpE,UAAM,oBAAoB,SAAS,MAAM,gBAAgB,OAAO,OAAO,CAAC;AACxE,UAAM,gBAAgB,SAAS,MAAM,YAAY,OAAO,OAAO,CAAC;AAChE,UAAM,eAAe;AAAA,MACnB;AAAA;AAAA;AAAA,QAGE,OAAO,KAAK,gBAAgB,KAAK,EAAE,SAAS,KAAK,OAAO,KAAK,cAAc,KAAK,EAAE,SAAS;AAAA;AAAA,IAAA;AAG/F,UAAM,aAAa,cAAc,MAAM,MAAM,KAAK;AAElD,UAAM,sBAAsB;AAAA,MAC1B,MAAM,MAAM;AAAA,MACZ,MAAM,MAAM;AAAA,IAAA;AAGd;AAAA,MACE,MAAM;AAAA,MACN,CAAC,UAAyB,aAA4B;AACpD,YAAI,aAAa,UAAU;AACzB,gCAAsB,UAAU,QAAQ;AAAA,QAC1C;AAAA,MACF;AAAA,IAAA;AAGF,cAAU,MAAM;AACd,eAAS,MAAM;AAGb,8BAAsB,eAAe;AAAA,MAAA,CACtC;AAAA,IAAA,CACF;AAEK,UAAA,gBAAgB,CAAC,UAAgC;AAErD,UAAI,MAAM,YAAY,QAAQ,UAAU,KAAM;AAExC,YAAA,EAAC,OAAU,IAAA;AACX,YAAA,UAAU,SAAU,OAAuB,UAAU;AAI3D,UAAI,4BAA4B,QAAQ,OAAO,MAAM,GAAI;AAGnD,YAAA,SAAS,CAAC,GAAG,QAAQ,MAAM,iBAAiB,cAAc,CAAC,EAAE,OAAO,SAAS;AAC7E,YAAA,CAAC,GAAG,IAAI;AACd,UAAI,OAAO,WAAW,KAAK,eAAe,aAAa;AACrD,qBAAa,GAAG;AAAA,MAClB;AAAA,IAAA;AAGK,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EAEJ;AAAA,EACA,SAAS;AACP,UAAM,QAAQ,KAAK;AACnB,UAAM,QAAQ,KAAK;AAEnB,UAAM,KAAK;AACL,UAAA,aAAa,CAAC,MAAM;AAG1B,QAAI,SAAc;AAClB,UAAM,eAAe,cAAc,iBAAiB,CAAI,GAAA,KAAK,KAAK,MAAM;AACxE,UAAM,UAAU,eAAe,MAAM,QAAW,YAAY,EAAE,QAAQ;AAElE,QAAA,gBAAgB,KAAK,cAAc;AAC/B,YAAA,WAA+B,aAAa,WAAW;AAC7D,UAAI,MAAM,qBAAqB;AAC7B,YAAI,cAAc;AACP,mBAAA;AAAA,YACP;AAAA,YACA;AAAA,cACE,OAAO;AAAA,cACP,IAAI;AAAA,cACJ,KAAK,MAAM,YAAY;AAAA,YACzB;AAAA,YACA;AAAA,UAAA;AAAA,QAEJ;AACA,YAAI,KAAK,cAAc;AACZ,mBAAA,EAAEN,aAAM,KAAK,eAAe,EAAC,SAAS,MAAM,QAAO;AAAA,QAAA,OACvD;AACL,mBAAS,EAAE,OAAO,CAAI,GAAA,CAAC,MAAM,CAAC;AAAA,QAChC;AAAA,MAAA,OACK;AACL,cAAM,cAAc;AAAA,UAClB,SAAS,aAAa,KAAK,gBAAgB;AAAA,UAC3C,GAAI,KAAK,eAAe,KAAK,gBAAgB,CAAC;AAAA,UAC9C,KAAK,KAAK,eAAe,WAAW;AAAA,UACpC,IAAI;AAAA,UACJ,KAAK,MAAM,YAAY;AAAA,UACvB,UAAU,aAAa,OAAO;AAAA,UAC9B,OAAO;AAAA,YACL,KAAK,eAAe,mBAAmB;AAAA,YACvC;AAAA,cACE,oBAAoB;AAAA,cACpB,kBAAkB,KAAK,gBAAgB;AAAA,cACvC,QAAQ,CAAC,KAAK,gBAAgB;AAAA,cAC9B,WAAW,CAAC,KAAK,gBAAgB,CAAC;AAAA,cAClC,CAAC,kBAAkB,MAAM,SAAS,EAAE,GAAG,CAAC,CAAC,MAAM;AAAA,YACjD;AAAA,YACA,KAAK;AAAA,YACL,MAAM;AAAA,UACR;AAAA,QAAA;AAEF,YAAI,KAAK,cAAc;AACrB,mBAAS,EAAEA,aAAM,aAAa,EAAC,SAAS,MAAM,cAAa;AAAA,QAAA,OACtD;AACI,mBAAA,EAAE,UAAU,aAAa,YAAY;AAAA,QAChD;AAAA,MACF;AAAA,IACF;AAEA,QAAI,mBAAmB;AACvB,UAAM,yBACJ,cAAc,4BAA4B,CAAI,GAAA,KAAK,KAAK,KAAK;AAC/D,UAAM,oBAAoB,yBACtB,MAAM,QAAW,uBAAuB,EAAE,QAC1C;AAEJ,QAAI,wBAAwB;AACP,yBAAA;AAAA,QACjBC;AAAAA,QACA;AAAA,UACE,UAAU,MAAM;AAAA,UAChB,IAAI;AAAA,UACJ,OAAO,MAAM;AAAA,UACb,SAAS,MAAM;AAAA,QACjB;AAAA,QACA,EAAC,SAAS,MAAM,uBAAsB;AAAA,MAAA;AAAA,IAE1C;AAEA,QAAI,iBAAiB;AACrB,UAAM,uBACJ,cAAc,0BAA0B,CAAI,GAAA,KAAK,KAAK,KAAK;AAC7D,UAAM,kBAAkB,uBACpB,MAAM,QAAW,qBAAqB,EAAE,QACxC;AAEJ,QAAI,sBAAsB;AACP,uBAAA;AAAA,QACfG;AAAAA,QACA;AAAA,UACE,UAAU,MAAM;AAAA,UAChB,IAAI;AAAA,UACJ,OAAO,MAAM;AAAA,UACb,SAAS,MAAM;AAAA,QACjB;AAAA,QACA,EAAC,SAAS,MAAM,qBAAoB;AAAA;AAAA,MAAA;AAAA,IAGxC;AAEA,QAAI,eAAe;AACnB,UAAM,qBAAqB,cAAc,uBAAuB,CAAI,GAAA,KAAK,KAAK,KAAK;AACnF,UAAM,gBAAgB,qBAClB,MAAM,QAAW,kBAAkB,EAAE,QACrC;AACJ,QAAI,oBAAoB;AACP,qBAAA;AAAA,QACbD;AAAAA,QACA;AAAA,UACE,IAAI;AAAA,QACN;AAAA,QACA,EAAC,SAAS,MAAM,mBAAkB;AAAA,MAAA;AAAA,IAEtC;AAMM,UAAA,kBAAmB,KAAK,kBAC5B;AAAA,MACE;AAAA,MACA,MAAM,UAAU,QAAQ,oBAAoB;AAAA,MAC5C,MAAM,UAAU,OAAO,kBAAkB;AAAA,IAAA,EAExC,OAAO,CAAC,MAAM,CAAC,EACf,KAAK,GAAG,KAAK;AAElB,UAAM,gBAAgB;AAAA,MACpB,cAAc,mBAAmB,EAAC,iBAAiB,eAAe,IAAI,QAAA,GAAU,KAAK,KAAK;AAAA,MAC1F;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAEF,QAAI,CAAC,KAAK,gBAAgB,MAAM,SAAU,eAAc,KAAK,MAAM;AAEnE,QAAI,WAAW;AAAA,MACb;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,OAAO;AAAA,UACL;AAAA,YACE,iBAAiB,CAAC,KAAK,gBAAgB,MAAM;AAAA,UAC/C;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,IAAA;AAEF,QAAI,KAAK,cAAc;AACrB,iBAAW,EAAEH,aAAM,EAAC,KAAK,WAAW,GAAG,KAAK,gBAAkB,GAAA,EAAC,SAAS,MAAM,cAAc,CAAA;AAAA,IAC9F;AAMA,UAAM,WAAW;AAAA,MACf,SAAS;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,iBAAiB,MAAM;AAAA,QACzB;AAAA,MACF;AAAA,MACA,MAAM,MAAM,MAAM,MAAM,EAAE,EAAE;AAAA,MAC5B,YAAY,aAAa,MAAM,WAAW;AAAA,MAC1C,QAAQ,aAAa,OAAO;AAAA,MAC5B,gBAAgB,KAAK;AAAA;AAAA;AAAA,MAGrB,mBAAmB,cAAc,KAAK,eAAe,UAAU;AAAA,IAAA;AAG7D,QAAA,KAAK,gBAAgB,CAAC,YAAY;AAC7B,aAAA,EAAEE,aAAU,UAAU,EAAC,SAAS,MAAM,CAAC,QAAQ,QAAQ,EAAA,CAAE;AAAA,IAClE;AAEO,WAAA;AAAA,MACL,aAAa,aAAa;AAAA,MAC1B;AAAA,MACA,KAAK,gBAAgB,aACjB,CAAC,EAAEA,aAAU,MAAM,EAAC,SAAS,MAAM,CAAC,QAAQ,QAAQ,EAAE,CAAA,CAAC,IACvD,KAAK,gBAAgB,CAAC,MAAM,WAC1B,CAAC,QAAQ,QAAQ,IACjB,CAAC,QAAQ;AAAA,IAAA;AAAA,EAEnB;AACF,CAAC;"}