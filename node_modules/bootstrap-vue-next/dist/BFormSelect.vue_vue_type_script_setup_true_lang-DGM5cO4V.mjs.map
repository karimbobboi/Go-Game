{"version":3,"file":"BFormSelect.vue_vue_type_script_setup_true_lang-DGM5cO4V.mjs","sources":["../src/components/BFormSelect/BFormSelectOptionGroup.vue","../src/components/BFormSelect/BFormSelect.vue"],"sourcesContent":["<template>\n  <optgroup :label=\"props.label\">\n    <slot name=\"first\" />\n    <BFormSelectOption\n      v-for=\"(option, index) in normalizedOptsWrapper\"\n      :key=\"index\"\n      :disabled=\"option.disabled\"\n      :value=\"option.value\"\n      v-bind=\"$attrs\"\n    >\n      <!-- eslint-disable-next-line vue/no-v-html -->\n      <span v-if=\"!!option.html\" v-html=\"option.html\" />\n      <template v-else>\n        {{ option.text }}\n      </template>\n    </BFormSelectOption>\n    <slot />\n  </optgroup>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionGroupProps} from '../../types/ComponentProps'\nimport {computed} from 'vue'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionGroupProps>(), {\n  disabledField: 'disabled',\n  htmlField: 'html',\n  label: undefined,\n  options: () => [],\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelectOptionGroup')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n}>()\n\nconst {normalizedOptions} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(() => normalizedOptions.value as SelectOption<T>[])\n</script>\n","<template>\n  <select\n    :id=\"computedId\"\n    ref=\"input\"\n    v-model=\"localValue\"\n    :class=\"computedClasses\"\n    :name=\"props.name\"\n    :form=\"props.form || undefined\"\n    :multiple=\"props.multiple || undefined\"\n    :size=\"computedSelectSize\"\n    :disabled=\"props.disabled\"\n    :required=\"props.required || undefined\"\n    :aria-required=\"props.required || undefined\"\n    :aria-invalid=\"computedAriaInvalid\"\n  >\n    <slot name=\"first\" />\n    <template v-for=\"(option, index) in normalizedOptsWrapper\" :key=\"index\">\n      <BFormSelectOptionGroup\n        v-if=\"isComplex(option)\"\n        :label=\"option.label\"\n        :options=\"option.options\"\n        :value-field=\"props.valueField\"\n        :text-field=\"props.textField\"\n        :html-field=\"props.htmlField\"\n        :disabled-field=\"props.disabledField\"\n      />\n      <BFormSelectOption v-else :value=\"option.value\" :disabled=\"option.disabled\">\n        <!-- eslint-disable-next-line vue/no-v-html -->\n        <span v-if=\"!!option.html\" v-html=\"option.html\" />\n        <template v-else>\n          {{ option.text }}\n        </template>\n      </BFormSelectOption>\n    </template>\n    <slot />\n  </select>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport type {BFormSelectProps} from '../../types/ComponentProps'\nimport {computed, ref} from 'vue'\nimport BFormSelectOption from './BFormSelectOption.vue'\nimport BFormSelectOptionGroup from './BFormSelectOptionGroup.vue'\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {useFocus, useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport {useId} from '../../composables/useId'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useFormSelect} from '../../composables/useFormSelect'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../../types/SelectTypes'\n\nconst _props = withDefaults(defineProps<Omit<BFormSelectProps, 'modelValue'>>(), {\n  ariaInvalid: undefined,\n  autofocus: false,\n  disabled: false,\n  disabledField: 'disabled',\n  form: undefined,\n  htmlField: 'html',\n  id: undefined,\n  labelField: 'label',\n  multiple: false,\n  name: undefined,\n  // eslint-disable-next-line vue/require-valid-default-prop\n  options: () => [],\n  optionsField: 'options',\n  plain: false,\n  required: false,\n  selectSize: 0,\n  size: 'md',\n  state: null,\n  textField: 'text',\n  valueField: 'value',\n})\nconst props = useDefaults(_props, 'BFormSelect')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  first?: (props: Record<string, never>) => any\n}>()\n\nconst modelValue = defineModel<T>({\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default: '' as any,\n})\n\nconst computedId = useId(() => props.id, 'input')\n\nconst selectSizeNumber = useToNumber(() => props.selectSize)\n\nconst stateClass = useStateClass(() => props.state)\n\nconst input = ref<HTMLElement | null>(null)\n\nconst {focused} = useFocus(input, {\n  initialValue: props.autofocus,\n})\n\nconst computedClasses = computed(() => [\n  stateClass.value,\n  {\n    'form-control': props.plain,\n    [`form-control-${props.size}`]: props.size !== 'md' && props.plain,\n    'form-select': !props.plain,\n    [`form-select-${props.size}`]: props.size !== 'md' && !props.plain,\n  },\n])\n\nconst computedSelectSize = computed(() =>\n  selectSizeNumber.value || props.plain ? selectSizeNumber.value : undefined\n)\n\nconst computedAriaInvalid = useAriaInvalid(\n  () => props.ariaInvalid,\n  () => props.state\n)\n\nconst {normalizedOptions, isComplex} = useFormSelect(() => props.options, props)\n\nconst normalizedOptsWrapper = computed(\n  () => normalizedOptions.value as readonly (ComplexSelectOptionRaw<T> | SelectOption<T>)[]\n)\n\nconst localValue = computed({\n  get: () => modelValue.value,\n  set: (newValue) => {\n    modelValue.value = newValue\n  },\n})\n\ndefineExpose({\n  blur: () => {\n    focused.value = false\n  },\n  element: input,\n  focus: () => {\n    focused.value = true\n  },\n})\n</script>\n"],"names":["_useModel"],"mappings":";;;;;;;;;;;;;;;;;;;;;AA4BA,UAAM,SAAS;AAQT,UAAA,QAAQ,YAAY,QAAQ,wBAAwB;AAS1D,UAAM,EAAC,kBAAiB,IAAI,cAAc,MAAM,MAAM,SAAS,KAAK;AAEpE,UAAM,wBAAwB,SAAS,MAAM,kBAAkB,KAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIzF,UAAM,SAAS;AAsBT,UAAA,QAAQ,YAAY,QAAQ,aAAa;AASzC,UAAA,aAAaA,SAAc,SAAA,YAGhC;AAED,UAAM,aAAa,MAAM,MAAM,MAAM,IAAI,OAAO;AAEhD,UAAM,mBAAmB,YAAY,MAAM,MAAM,UAAU;AAE3D,UAAM,aAAa,cAAc,MAAM,MAAM,KAAK;AAE5C,UAAA,QAAQ,IAAwB,IAAI;AAE1C,UAAM,EAAC,QAAA,IAAW,SAAS,OAAO;AAAA,MAChC,cAAc,MAAM;AAAA,IAAA,CACrB;AAEK,UAAA,kBAAkB,SAAS,MAAM;AAAA,MACrC,WAAW;AAAA,MACX;AAAA,QACE,gBAAgB,MAAM;AAAA,QACtB,CAAC,gBAAgB,MAAM,IAAI,EAAE,GAAG,MAAM,SAAS,QAAQ,MAAM;AAAA,QAC7D,eAAe,CAAC,MAAM;AAAA,QACtB,CAAC,eAAe,MAAM,IAAI,EAAE,GAAG,MAAM,SAAS,QAAQ,CAAC,MAAM;AAAA,MAC/D;AAAA,IAAA,CACD;AAED,UAAM,qBAAqB;AAAA,MAAS,MAClC,iBAAiB,SAAS,MAAM,QAAQ,iBAAiB,QAAQ;AAAA,IAAA;AAGnE,UAAM,sBAAsB;AAAA,MAC1B,MAAM,MAAM;AAAA,MACZ,MAAM,MAAM;AAAA,IAAA;AAGR,UAAA,EAAC,mBAAmB,cAAa,cAAc,MAAM,MAAM,SAAS,KAAK;AAE/E,UAAM,wBAAwB;AAAA,MAC5B,MAAM,kBAAkB;AAAA,IAAA;AAG1B,UAAM,aAAa,SAAS;AAAA,MAC1B,KAAK,MAAM,WAAW;AAAA,MACtB,KAAK,CAAC,aAAa;AACjB,mBAAW,QAAQ;AAAA,MACrB;AAAA,IAAA,CACD;AAEY,aAAA;AAAA,MACX,MAAM,MAAM;AACV,gBAAQ,QAAQ;AAAA,MAClB;AAAA,MACA,SAAS;AAAA,MACT,OAAO,MAAM;AACX,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IAAA,CACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}