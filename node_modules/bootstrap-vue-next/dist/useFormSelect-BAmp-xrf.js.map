{"version":3,"file":"useFormSelect-BAmp-xrf.js","sources":["../src/components/BFormSelect/BFormSelectOption.vue","../src/composables/useFormSelect.ts"],"sourcesContent":["<template>\n  <option :value=\"props.value\" :disabled=\"props.disabled\">\n    <slot />\n  </option>\n</template>\n\n<script setup lang=\"ts\" generic=\"T\">\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {BFormSelectOptionProps} from '../../types/ComponentProps'\n\nconst _props = withDefaults(defineProps<BFormSelectOptionProps<T>>(), {\n  disabled: false,\n  value: undefined,\n})\nconst props = useDefaults<BFormSelectOptionProps<T>>(_props, 'BFormSelectOption')\n\ndefineSlots<{\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  default?: (props: Record<string, never>) => any\n}>()\n</script>\n","import {computed, type MaybeRefOrGetter, toValue} from 'vue'\nimport {get} from '../utils/object'\nimport type {ComplexSelectOptionRaw, SelectOption} from '../types/SelectTypes'\n\nexport const useFormSelect = (\n  options: MaybeRefOrGetter<ReadonlyArray<unknown>>,\n  props: MaybeRefOrGetter<Record<string, unknown>>\n) => {\n  const isComplex = (option: unknown): option is ComplexSelectOptionRaw =>\n    typeof option === 'object' && option !== null && 'label' in option\n\n  const normalizeOption = (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    option: any\n  ): ComplexSelectOptionRaw | SelectOption => {\n    const propsValue = toValue(props)\n\n    if (typeof option === 'string') {\n      return {value: option, text: option}\n    }\n    if (typeof option === 'number') {\n      return {value: option, text: `${option}`}\n    }\n    if (option instanceof Date) {\n      return {value: option, text: option.toLocaleString()}\n    }\n\n    const value: unknown = get(option, propsValue.valueField as string)\n    const text: string = get(option, propsValue.textField as string)\n    const html: string = get(option, propsValue.htmlField as string)\n    const disabled: boolean = get(option, propsValue.disabledField as string)\n\n    const opts: undefined | unknown[] = propsValue.optionsField\n      ? get(option, propsValue.optionsField as string)\n      : undefined\n\n    if (opts !== undefined) {\n      return {\n        label: get(option, propsValue.labelField as string) || text,\n        options: opts,\n      } as ComplexSelectOptionRaw\n    }\n\n    return {\n      value,\n      text,\n      html,\n      disabled,\n    } as SelectOption\n  }\n\n  const normalizeOptions = (\n    opts: ReadonlyArray<unknown>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): (ComplexSelectOptionRaw | SelectOption)[] => opts.map((option) => normalizeOption(option))\n\n  const normalizedOptions = computed(() => normalizeOptions(toValue(options)))\n\n  return {normalizedOptions, isComplex}\n}\n"],"names":["_props","__props","props","useDefaults","options","normalizeOptions","opts","map","option","propsValue","toValue","value","text","Date","toLocaleString","get","valueField","textField","html","htmlField","disabled","disabledField","optionsField","label","labelField","normalizeOption","normalizedOptions","computed","isComplex"],"mappings":"+PAUA,MAAMA,EAASC,EAITC,EAAQC,EAAAA,YAAuCH,EAAQ,2NCVhC,CAC3BI,EACAF,KAEM,MA2CAG,EACJC,GAE8CA,EAAKC,KAAKC,GA3ClC,CAEtBA,IAEM,MAAAC,EAAaC,UAAQR,GAEvB,GAAkB,iBAAXM,EACT,MAAO,CAACG,MAAOH,EAAQI,KAAMJ,GAE3B,GAAkB,iBAAXA,EACT,MAAO,CAACG,MAAOH,EAAQI,KAAM,GAAGJ,KAElC,GAAIA,aAAkBK,KACpB,MAAO,CAACF,MAAOH,EAAQI,KAAMJ,EAAOM,kBAGtC,MAAMH,EAAiBI,EAAAA,IAAIP,EAAQC,EAAWO,YACxCJ,EAAeG,EAAAA,IAAIP,EAAQC,EAAWQ,WACtCC,EAAeH,EAAAA,IAAIP,EAAQC,EAAWU,WACtCC,EAAoBL,EAAAA,IAAIP,EAAQC,EAAWY,eAE3Cf,EAA8BG,EAAWa,aAC3CP,MAAIP,EAAQC,EAAWa,mBACvB,EAEJ,YAAa,IAAThB,EACK,CACLiB,MAAOR,EAAAA,IAAIP,EAAQC,EAAWe,aAAyBZ,EACvDR,QAASE,GAIN,CACLK,QACAC,OACAM,OACAE,WAAA,EAOiEK,CAAgBjB,KAI9E,MAAA,CAACkB,kBAFkBC,EAAAA,UAAS,IAAMtB,EAAiBK,EAAAA,QAAQN,MAEvCwB,UAlDRpB,GACC,iBAAXA,GAAkC,OAAXA,GAAmB,UAAWA"}