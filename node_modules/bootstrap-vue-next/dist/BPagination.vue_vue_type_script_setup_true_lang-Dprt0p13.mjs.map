{"version":3,"file":"BPagination.vue_vue_type_script_setup_true_lang-Dprt0p13.mjs","sources":["../src/components/BPagination/BPagination.vue"],"sourcesContent":["<template>\n  <ul\n    class=\"pagination\"\n    :class=\"computedWrapperClasses\"\n    role=\"menubar\"\n    :aria-disabled=\"props.disabled\"\n    :aria-label=\"props.ariaLabel || undefined\"\n  >\n    <template v-for=\"page in pages\" :key=\"`page-${page.id}`\">\n      <li v-bind=\"page.li\">\n        <span\n          v-if=\"page.id === FIRST_ELLIPSIS || page.id === LAST_ELLIPSIS\"\n          v-bind=\"ellipsisProps.span\"\n        >\n          <slot name=\"ellipsis-text\">\n            {{ props.ellipsisText || '...' }}\n          </slot>\n        </span>\n        <component v-bind=\"page.button\" :is=\"page.button.is\" v-else @click=\"page.clickHandler\">\n          <slot\n            :name=\"page.text.name\"\n            :disabled=\"page.text.disabled\"\n            :page=\"page.text.page\"\n            :index=\"page.text.index\"\n            :active=\"page.text.active\"\n            :content=\"page.text.value\"\n          >\n            {{ page.text.value }}\n          </slot>\n        </component>\n      </li>\n    </template>\n  </ul>\n</template>\n\n<script setup lang=\"ts\">\nimport {BvEvent} from '../../utils'\nimport {computed, watch} from 'vue'\nimport type {BPaginationProps} from '../../types/ComponentProps'\nimport {useAlignment} from '../../composables/useAlignment'\nimport {useToNumber} from '@vueuse/core'\nimport {useDefaults} from '../../composables/useDefaults'\nimport type {ClassValue} from '../../types/AnyValuedAttributes'\n\n// Threshold of limit size when we start/stop showing ellipsis\nconst ELLIPSIS_THRESHOLD = 3\n\nconst FIRST_BUTTON = -1\nconst PREV_BUTTON = -2\nconst NEXT_BUTTON = -3\nconst LAST_BUTTON = -4\nconst FIRST_ELLIPSIS = -5\nconst LAST_ELLIPSIS = -6\n\n// This is necessary because type inference isn't succeeding for the pages computed\ninterface PageButton {\n  id: number\n  li: Record<string, unknown>\n  button: Record<string, unknown>\n  text: Record<string, unknown>\n  clickHandler: (e: Readonly<MouseEvent>) => void\n}\n\nconst _props = withDefaults(defineProps<Omit<BPaginationProps, 'modelValue'>>(), {\n  align: 'start',\n  ariaControls: undefined,\n  ariaLabel: 'Pagination',\n  disabled: false,\n  ellipsisClass: undefined,\n  ellipsisText: '\\u2026',\n  firstClass: undefined,\n  firstNumber: false,\n  firstText: '\\u00AB',\n  hideEllipsis: false,\n  hideGotoEndButtons: false,\n  labelFirstPage: 'Go to first page',\n  labelLastPage: 'Go to last page',\n  labelNextPage: 'Go to next page',\n  labelPage: 'Go to page',\n  labelPrevPage: 'Go to previous page',\n  lastClass: undefined,\n  lastNumber: false,\n  lastText: '\\u00BB',\n  limit: 5,\n  nextClass: undefined,\n  nextText: '\\u203A',\n  pageClass: undefined,\n  perPage: DEFAULT_PER_PAGE,\n  pills: false,\n  prevClass: undefined,\n  prevText: '\\u2039',\n  size: undefined,\n  totalRows: DEFAULT_TOTAL_ROWS,\n})\nconst props = useDefaults(_props, 'BPagination')\n\nconst emit = defineEmits<{\n  'page-click': [event: BvEvent, pageNumber: number]\n}>()\n\nconst modelValue = defineModel<Exclude<BPaginationProps['modelValue'], undefined>>({default: 1})\n\nconst limitNumber = useToNumber(() => props.limit, {nanToZero: true, method: 'parseInt'})\nconst perPageNumber = useToNumber(() => props.perPage, {nanToZero: true, method: 'parseInt'})\nconst totalRowsNumber = useToNumber(() => props.totalRows, {nanToZero: true, method: 'parseInt'})\nconst modelValueNumber = useToNumber(modelValue, {nanToZero: true, method: 'parseInt'})\n\nconst perPageSanitized = computed(() => Math.max(perPageNumber.value || DEFAULT_PER_PAGE, 1))\nconst totalRowsSanitized = computed(() => Math.max(totalRowsNumber.value || DEFAULT_TOTAL_ROWS, 0))\n// Use Active to on page-item to denote active tab\nconst numberOfPages = computed(() => Math.ceil(totalRowsSanitized.value / perPageSanitized.value))\nconst computedFill = computed(() => props.align === 'fill')\n// This doesn't use the computedFill util because TS cannot infer that it would never be 'fill'\nconst justifyAlign = computed(() => (props.align === 'fill' ? 'start' : props.align))\n\nconst alignment = useAlignment(justifyAlign)\n\nconst isActivePage = (pageNumber: number) => pageNumber === modelValueNumber.value\nconst getTabIndex = (num: number) => (props.disabled ? null : isActivePage(num) ? '0' : '-1')\n\nconst checkDisabled = (num: number) =>\n  props.disabled ||\n  isActivePage(num) ||\n  modelValueNumber.value < 1 ||\n  // Check if the number is out of bounds\n  num < 1 ||\n  num > numberOfPages.value\n\nconst firstDisabled = computed(() => checkDisabled(1))\nconst prevDisabled = computed(() => checkDisabled(modelValueNumber.value - 1))\nconst lastDisabled = computed(() => checkDisabled(numberOfPages.value))\nconst nextDisabled = computed(() => checkDisabled(modelValueNumber.value + 1))\n\nconst getBaseButtonProps = ({\n  page,\n  classVal,\n  dis,\n  slotName,\n  textValue,\n  tabIndex,\n  label,\n  position,\n  isActive,\n  role,\n  hidden,\n}: {\n  page: number\n  dis: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  tabIndex?: string\n  label?: string\n  position?: number\n  isActive?: boolean\n  role?: string\n  hidden?: boolean\n}) => ({\n  li: {\n    'class': [\n      'page-item',\n      {\n        'active': isActive,\n        'disabled': dis,\n        'flex-fill': computedFill.value,\n        'd-flex': computedFill.value && !dis,\n      },\n      classVal,\n    ],\n    role,\n    'aria-hidden': hidden,\n  },\n  button: {\n    'is': dis ? 'span' : 'button',\n    'class': ['page-link', 'text-center', {'flex-grow-1': !dis && computedFill.value}],\n    'aria-label': label,\n    'aria-controls': props.ariaControls || undefined,\n    'aria-disabled': dis ? true : undefined,\n    'aria-posinset': position,\n    'aria-setsize': position ? numberOfPages.value : undefined,\n    'role': 'menuitem',\n    'type': dis ? undefined : 'button',\n    'tabindex': dis ? undefined : tabIndex,\n  },\n  text: {\n    name: slotName,\n    active: isActive,\n    value: textValue ?? page,\n    page,\n    disabled: dis,\n    index: page - 1,\n    content: textValue ? undefined : page,\n  },\n  clickHandler: (e: Readonly<MouseEvent>) => pageClick(e, page),\n})\n\nconst getButtonProps = ({\n  page,\n  classVal,\n  dis,\n  slotName,\n  textValue,\n  label,\n}: {\n  page: number\n  dis: boolean\n  classVal: ClassValue\n  slotName: string\n  textValue?: string\n  label: string\n}) => getBaseButtonProps({page, classVal, dis, slotName, textValue, label, tabIndex: '-1'})\n\nconst getPageButtonProps = (page: number) =>\n  getBaseButtonProps({\n    page,\n    dis: props.disabled,\n    classVal: props.pageClass,\n    slotName: 'page',\n    label: props.labelPage ? `${props.labelPage} ${page}` : undefined,\n    tabIndex: getTabIndex(page) ?? undefined,\n    position: page,\n    isActive: isActivePage(page),\n  })\n\nconst firstButtonProps = computed(() =>\n  getButtonProps({\n    page: 1,\n    dis: firstDisabled.value,\n    classVal: props.firstClass,\n    slotName: 'first-text',\n    textValue: props.firstText,\n    label: props.labelFirstPage,\n  })\n)\nconst prevButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.max(modelValueNumber.value - 1, 1),\n    dis: prevDisabled.value,\n    classVal: props.prevClass,\n    slotName: 'prev-text',\n    textValue: props.prevText,\n    label: props.labelPrevPage,\n  })\n)\nconst nextButtonProps = computed(() =>\n  getButtonProps({\n    page: Math.min(modelValueNumber.value + 1, numberOfPages.value),\n    dis: nextDisabled.value,\n    classVal: props.nextClass,\n    slotName: 'next-text',\n    textValue: props.nextText,\n    label: props.labelNextPage,\n  })\n)\nconst lastButtonProps = computed(() =>\n  getButtonProps({\n    page: numberOfPages.value,\n    dis: lastDisabled.value,\n    classVal: props.lastClass,\n    slotName: 'last-text',\n    textValue: props.lastText,\n    label: props.labelLastPage,\n  })\n)\n\nconst ellipsisProps = computed(() => ({\n  li: {\n    class: [\n      'page-item',\n      'disabled',\n      'text-center',\n      'bv-d-xs-down-none',\n      computedFill.value ? 'flex-fill' : '',\n      props.ellipsisClass,\n    ],\n    role: 'separator',\n  },\n  span: {\n    class: ['page-link'],\n  },\n}))\n\nconst computedWrapperClasses = computed(() => [\n  alignment.value,\n  {\n    [`pagination-${props.size}`]: props.size !== undefined,\n    'b-pagination-pills': props.pills,\n  },\n])\n\nconst pagination = computed(() => ({\n  pageSize: perPageSanitized.value,\n  totalRows: totalRowsNumber.value,\n  numberOfPages: numberOfPages.value,\n}))\n\nconst pageClick = (event: Readonly<MouseEvent>, pageNumber: number) => {\n  if (pageNumber === modelValueNumber.value) return\n\n  const clickEvent = new BvEvent('page-click', {\n    cancelable: true,\n    target: event.target,\n  })\n  emit('page-click', clickEvent, pageNumber)\n\n  if (clickEvent.defaultPrevented) return\n\n  modelValue.value = pageNumber\n\n  //    nextTick(() => {\n  //  if (isVisible(target) && un_element.contains(target)) {\n  //  attemptFocus(target)\n  //} else {\n  //this.focusCurrent()\n  //}\n  // })\n}\n\nwatch(modelValueNumber, (newValue) => {\n  const sanitizeCurrentPage = (value: number, numberOfPages: number) => {\n    const page = value || 1\n    return page > numberOfPages ? numberOfPages : page < 1 ? 1 : page\n  }\n  const calculatedValue = sanitizeCurrentPage(newValue, numberOfPages.value)\n  if (calculatedValue === modelValue.value) return\n  modelValue.value = calculatedValue\n})\n\nwatch(pagination, (oldValue, newValue) => {\n  if (newValue.pageSize !== oldValue.pageSize && newValue.totalRows === oldValue.totalRows) {\n    // If the page size changes, reset to page 1\n    modelValue.value = 1\n  } else if (\n    newValue.numberOfPages !== oldValue.numberOfPages &&\n    modelValueNumber.value > newValue.numberOfPages\n  ) {\n    // If `numberOfPages` changes and is less than\n    // the `currentPage` number, reset to page 1\n    modelValue.value = 1\n  }\n})\n\nconst pages = computed(\n  () =>\n    elements.value.map((p) => {\n      switch (p) {\n        case FIRST_BUTTON:\n          return {id: p, ...firstButtonProps.value}\n        case PREV_BUTTON:\n          return {id: p, ...prevButtonProps.value}\n        case NEXT_BUTTON:\n          return {id: p, ...nextButtonProps.value}\n        case LAST_BUTTON:\n          return {id: p, ...lastButtonProps.value}\n        case FIRST_ELLIPSIS:\n        case LAST_ELLIPSIS:\n          return {id: p, ...ellipsisProps.value}\n        default:\n          return {id: p, ...getPageButtonProps(p)}\n      }\n    }) as PageButton[]\n)\n\nconst elements = computed(() => {\n  // The idea here is to create an array of all the buttons on the page control.\n  // This way we can keep the invariants in one place and the template code just\n  // iterates over the array.\n\n  const pages = numberOfPages.value\n  const {value} = modelValueNumber\n  const limit = limitNumber.value\n  const firstPage = props.firstNumber ? 1 : 0\n  const lastPage = props.lastNumber ? 1 : 0\n  const hideEllipsis = props.hideEllipsis || limit <= ELLIPSIS_THRESHOLD\n  const hideFirstButton = props.hideGotoEndButtons && !props.firstNumber ? 1 : 0\n  const hideLastButton = props.hideGotoEndButtons && !props.lastNumber ? 1 : 0\n  const showFirstButton = hideFirstButton ? 0 : 1\n  const showLastButton = hideLastButton ? 0 : 1\n\n  // The first case is when all of the page buttons fit on the control, this is\n  //  the simplest case and the only one that will create an array smaller than\n  //  Limit + 4 - hideEndButtons * 2 (the [first, last,] prev, next buttons)\n\n  if (pages < limit + firstPage + lastPage) {\n    return [\n      !firstPage && !hideFirstButton ? FIRST_BUTTON : null,\n      PREV_BUTTON,\n      ...Array.from({length: pages}, (_, index) => index + 1),\n      NEXT_BUTTON,\n      !lastPage && !hideLastButton ? LAST_BUTTON : null,\n    ].filter((x) => x !== null) as number[]\n  }\n\n  // All of the remaining cases result in an array that is exactly limit + 4 - hideEndButtons * 2 in length, so create\n  //  the array upfront and set up the beginning and end buttons, then fill the rest for each case\n\n  const buttons = Array.from({length: limit + 4 - (hideFirstButton + hideLastButton)})\n  if (!hideFirstButton) {\n    if (!firstPage) {\n      buttons[0] = FIRST_BUTTON\n      buttons[1] = PREV_BUTTON\n    } else {\n      buttons[0] = PREV_BUTTON\n      buttons[1] = 1\n    }\n  } else {\n    buttons[0] = PREV_BUTTON\n  }\n\n  if (!hideLastButton) {\n    if (!lastPage) {\n      buttons[buttons.length - 1] = LAST_BUTTON\n      buttons[buttons.length - 2] = NEXT_BUTTON\n    } else {\n      buttons[buttons.length - 1] = NEXT_BUTTON\n      buttons[buttons.length - 2] = pages\n    }\n  } else {\n    buttons[buttons.length - 1] = NEXT_BUTTON\n  }\n\n  // The next case is where the page buttons start at the begginning, with\n  //  no ellipsis at the beginning, but one at the end\n\n  const halfLimit = Math.floor(limit / 2)\n  if (value <= halfLimit + firstPage) {\n    for (let index = 1; index <= limit; index++) {\n      buttons[index + 1 - hideFirstButton] = index + firstPage\n    }\n\n    if (!hideEllipsis) {\n      buttons[buttons.length - (2 + showLastButton)] = LAST_ELLIPSIS\n    }\n  }\n\n  // And then we have the case where the page buttons go up to the end, with no\n  //  ellipsis at the end, but one at the beginning\n\n  if (value > pages - halfLimit - lastPage) {\n    const start = pages - (limit - 1) - lastPage\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - hideFirstButton] = start + index\n    }\n\n    if (!hideEllipsis) {\n      buttons[1 + showFirstButton] = FIRST_ELLIPSIS\n    }\n  }\n\n  // Finally we have the case where we have ellipsis at both ends\n  if (!buttons[2]) {\n    // Is there a more elegant way to ceck that we're in the final case?\n    const start = value - Math.floor(limit / 2)\n    for (let index = 0; index < limit; index++) {\n      buttons[index + 2 - hideFirstButton] = start + index\n    }\n\n    if (!hideEllipsis) {\n      buttons[1 + showFirstButton] = FIRST_ELLIPSIS\n      buttons[buttons.length - (2 + showLastButton)] = LAST_ELLIPSIS\n    }\n  }\n\n  //Enable sanity check for debugging purposes\n  // for (let i = 0; i < buttons.length; i++) {\n  //   if (!buttons[i]) {\n  //     // eslint-disable-next-line no-console\n  //     console.log(\n  //       `Failed: button == ${i}, limit=${limit}, pages=${pages}, firstPage=${firstPage}, lastPage=${lastPage}, value=${value}`\n  //     )\n  //   }\n  // }\n\n  return buttons.filter((x) => x !== null) as number[]\n})\n</script>\n\n<script lang=\"ts\">\nconst DEFAULT_PER_PAGE = 20\nconst DEFAULT_TOTAL_ROWS = 0\n</script>\n"],"names":["_useModel","numberOfPages","pages"],"mappings":"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"}