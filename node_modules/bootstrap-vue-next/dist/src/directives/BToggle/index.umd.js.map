{"version":3,"file":"index.umd.js","sources":["../../../../src/directives/BToggle/index.ts"],"sourcesContent":["import {RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT} from '../../utils/constants'\nimport type {Directive, DirectiveBinding} from 'vue'\n\nconst getTargets = (\n  binding: DirectiveBinding<string | readonly string[] | undefined>,\n  el: Readonly<HTMLElement>\n) => {\n  const {modifiers, arg, value} = binding\n  // Any modifiers are considered target Ids\n  const targets = Object.keys(modifiers || {})\n\n  // If value is a string, split out individual targets (if space delimited)\n  const localValue = typeof value === 'string' ? value.split(RX_SPACE_SPLIT) : value\n\n  // Support target Id as link href (`href=\"#id\"`)\n  if (el.tagName.toLowerCase() === 'a') {\n    const href = el.getAttribute('href') || ''\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''))\n    }\n  }\n\n  // Add Id from `arg` (if provided), and support value\n  // as a single string Id or an array of string Ids\n  // If `value` is not an array or string, then it gets filtered out\n  Array.prototype.concat\n    .apply([], [arg, localValue])\n    .forEach((t) => typeof t === 'string' && targets.push(t))\n\n  // Return only unique and truthy target Ids\n  return targets.filter((t, index, arr) => t && arr.indexOf(t) === index)\n}\n\nconst toggle = (targetIds: readonly string[], el: Readonly<HTMLElement>) => {\n  targetIds.forEach((targetId) => {\n    const target = document.getElementById(targetId)\n\n    if (target !== null) {\n      target.dispatchEvent(new Event('bv-toggle'))\n    }\n  })\n  setTimeout(() => checkVisibility(targetIds, el), 50)\n}\n\nconst checkVisibility = (targetIds: readonly string[], el: Readonly<HTMLElement>) => {\n  let visible = false\n  targetIds.forEach((targetId) => {\n    const target = document.getElementById(targetId)\n\n    if (target?.classList.contains('show')) {\n      visible = true\n    }\n    if (target?.classList.contains('closing')) {\n      visible = false\n    }\n  })\n  el.setAttribute('aria-expanded', visible ? 'true' : 'false')\n  el.classList.remove(visible ? 'collapsed' : 'not-collapsed')\n  el.classList.add(visible ? 'not-collapsed' : 'collapsed')\n}\n\nconst handleUpdate = (\n  el: WithToggle,\n  binding: DirectiveBinding<string | readonly string[] | undefined>\n) => {\n  // Determine targets\n  const targets = getTargets(binding, el)\n  if (targets.length === 0) return\n\n  // Set up click handler\n  if (el.__toggle) {\n    setTimeout(() => {\n      el.removeEventListener('click', el.__toggle)\n      el.__toggle = () => toggle(targets, el)\n      el.addEventListener('click', el.__toggle)\n    }, 0)\n  } else {\n    el.__toggle = () => toggle(targets, el)\n    el.addEventListener('click', el.__toggle)\n  }\n\n  // Update attributes\n  el.setAttribute('aria-controls', targets.join(' '))\n  checkVisibility(targets, el)\n}\n\nexport interface WithToggle extends HTMLElement {\n  __toggle: () => void\n}\n\nexport const vBToggle: Directive<WithToggle> = {\n  mounted: handleUpdate,\n  updated: handleUpdate,\n  unmounted(el: WithToggle): void {\n    el.removeEventListener('click', el.__toggle)\n    el.removeAttribute('aria-controls')\n    el.removeAttribute('aria-expanded')\n  },\n}\n"],"names":["toggle","targetIds","el","forEach","targetId","target","document","getElementById","dispatchEvent","Event","setTimeout","checkVisibility","visible","classList","contains","setAttribute","remove","add","handleUpdate","binding","targets","modifiers","arg","value","Object","keys","localValue","split","RX_SPACE_SPLIT","tagName","toLowerCase","href","getAttribute","RX_HASH_ID","test","push","replace","RX_HASH","Array","prototype","concat","apply","t","filter","index","arr","indexOf","getTargets","length","__toggle","removeEventListener","addEventListener","join","vBToggle","mounted","updated","unmounted","removeAttribute"],"mappings":"kIAiCMA,EAAS,CAACC,EAA8BC,KAClCD,EAAAE,SAASC,IACX,MAAAC,EAASC,SAASC,eAAeH,GAExB,OAAXC,GACFA,EAAOG,cAAc,IAAIC,MAAM,aACjC,IAEFC,YAAW,IAAMC,EAAgBV,EAAWC,IAAK,GAAE,EAG/CS,EAAkB,CAACV,EAA8BC,KACrD,IAAIU,GAAU,EACJX,EAAAE,SAASC,IACX,MAAAC,EAASC,SAASC,eAAeH,IAEnC,MAAAC,OAAA,EAAAA,EAAQQ,UAAUC,SAAS,WACnBF,GAAA,IAER,MAAAP,OAAA,EAAAA,EAAQQ,UAAUC,SAAS,cACnBF,GAAA,EACZ,IAEFV,EAAGa,aAAa,gBAAiBH,EAAU,OAAS,SACpDV,EAAGW,UAAUG,OAAOJ,EAAU,YAAc,iBAC5CV,EAAGW,UAAUI,IAAIL,EAAU,gBAAkB,YAAW,EAGpDM,EAAe,CACnBhB,EACAiB,KAGM,MAAAC,EA/DW,EACjBD,EACAjB,KAEA,MAAMmB,UAACA,EAAAC,IAAWA,EAAKC,MAAAA,GAASJ,EAE1BC,EAAUI,OAAOC,KAAKJ,GAAa,CAAE,GAGrCK,EAA8B,iBAAVH,EAAqBA,EAAMI,MAAMC,EAAAA,gBAAkBL,EAG7E,GAAiC,MAA7BrB,EAAG2B,QAAQC,cAAuB,CACpC,MAAMC,EAAO7B,EAAG8B,aAAa,SAAW,GACpCC,EAAAA,WAAWC,KAAKH,IAClBX,EAAQe,KAAKJ,EAAKK,QAAQC,EAAAA,QAAS,IAEvC,CAUO,OALPC,MAAMC,UAAUC,OACbC,MAAM,GAAI,CAACnB,EAAKI,IAChBvB,SAASuC,GAAmB,iBAANA,GAAkBtB,EAAQe,KAAKO,KAGjDtB,EAAQuB,QAAO,CAACD,EAAGE,EAAOC,IAAQH,GAAKG,EAAIC,QAAQJ,KAAOE,GAAK,EAoCtDG,CAAW5B,EAASjB,GACb,IAAnBkB,EAAQ4B,SAGR9C,EAAG+C,SACLvC,YAAW,KACNR,EAAAgD,oBAAoB,QAAShD,EAAG+C,UACnC/C,EAAG+C,SAAW,IAAMjD,EAAOoB,EAASlB,GACjCA,EAAAiD,iBAAiB,QAASjD,EAAG+C,SAAQ,GACvC,IAEH/C,EAAG+C,SAAW,IAAMjD,EAAOoB,EAASlB,GACjCA,EAAAiD,iBAAiB,QAASjD,EAAG+C,WAIlC/C,EAAGa,aAAa,gBAAiBK,EAAQgC,KAAK,MAC9CzC,EAAgBS,EAASlB,GAAE,EAOhBmD,EAAkC,CAC7CC,QAASpC,EACTqC,QAASrC,EACT,SAAAsC,CAAUtD,GACLA,EAAAgD,oBAAoB,QAAShD,EAAG+C,UACnC/C,EAAGuD,gBAAgB,iBACnBvD,EAAGuD,gBAAgB,gBACrB"}