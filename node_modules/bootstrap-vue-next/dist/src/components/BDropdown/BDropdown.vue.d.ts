import { Boundary, Middleware, RootBoundary } from '@floating-ui/vue';
import { nextTick } from 'vue';
import { BDropdownProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
declare let __VLS_typeProps: Omit<BDropdownProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BDropdownProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        'button-content'?: (props: Record<string, never>) => any;
        default?: (props: {
            hide: () => void;
            show: () => void;
        }) => any;
        'toggle-text'?: (props: Record<string, never>) => any;
    }> & {
        'button-content'?: (props: Record<string, never>) => any;
        default?: (props: {
            hide: () => void;
            show: () => void;
        }) => any;
        'toggle-text'?: (props: Record<string, never>) => any;
    };
    refs: {
        wrapper: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            skip: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & Readonly<{}>, () => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }> | import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }>[] | undefined, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            skip: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & Readonly<{}>, {
            tag: string;
            skip: boolean;
        }, true, {}, import('vue').SlotsType<{
            default?: Record<string, never>;
        }>, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('vue').ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            skip: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & Readonly<{}>, () => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }> | import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
            [key: string]: any;
        }>[] | undefined, {}, {}, {}, {
            tag: string;
            skip: boolean;
        }> | null;
        splitButton: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: import('../..').BButtonProps["pressed"];
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOffsetHover?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOpacity?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineOpacityHover?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly opacityHover?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", pressed: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                'update:pressed': (pressed: boolean | undefined) => any;
                click: (value: MouseEvent) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        button: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: import('../..').BButtonProps["pressed"];
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOffsetHover?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOpacity?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineOpacityHover?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly opacityHover?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", pressed: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                'update:pressed': (pressed: boolean | undefined) => any;
                click: (value: MouseEvent) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        floating: HTMLUListElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: () => void;
    show: () => void;
    toggle: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean) => any;
    click: (event: MouseEvent) => any;
    hidden: () => any;
    hide: (value: BvTriggerableEvent) => any;
    'hide-prevented': () => any;
    show: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    shown: () => any;
    toggle: () => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onClick?: ((event: MouseEvent) => any) | undefined;
    onHidden?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onToggle?: (() => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: (() => any) | undefined;
}>, {
    disabled: boolean;
    id: string;
    size: import('../..').Size;
    end: boolean;
    center: boolean;
    text: string;
    variant: import('../..').ButtonVariant | null;
    role: string;
    lazy: boolean;
    ariaLabel: string;
    autoClose: boolean | "inside" | "outside";
    boundary: Boundary | RootBoundary;
    boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
    dropend: boolean;
    dropstart: boolean;
    dropup: boolean;
    floatingMiddleware: Middleware[];
    isNav: boolean;
    menuClass: import('../../types/AnyValuedAttributes').ClassValue;
    noCaret: boolean;
    noFlip: boolean;
    noShift: boolean;
    noSize: boolean;
    offset: number | string | Readonly<{
        mainAxis?: number;
        crossAxis?: number;
        alignmentAxis?: number | null;
    }>;
    skipWrapper: boolean;
    split: boolean;
    splitButtonType: import('../..').ButtonType;
    splitClass: import('../../types/AnyValuedAttributes').ClassValue;
    splitDisabled: boolean;
    splitHref: string;
    splitTo: import('vue-router').RouteLocationRaw;
    splitVariant: import('../..').ButtonVariant | null;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    toggleClass: import('../../types/AnyValuedAttributes').ClassValue;
    toggleText: string;
    wrapperClass: import('../../types/AnyValuedAttributes').ClassValue;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
