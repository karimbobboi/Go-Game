import { BModalProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
declare let __VLS_typeProps: Omit<BModalProps, 'modelValue'>;
type SharedSlotsData = {
    cancel: () => void;
    close: () => void;
    hide: (trigger?: string) => void;
    ok: () => void;
    active: boolean;
    visible: boolean;
};
type __VLS_PublicProps = {
    modelValue?: Exclude<BModalProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        backdrop?: (props: SharedSlotsData) => any;
        cancel?: (props: SharedSlotsData) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        ok?: (props: SharedSlotsData) => any;
        title?: (props: SharedSlotsData) => any;
    }> & {
        backdrop?: (props: SharedSlotsData) => any;
        cancel?: (props: SharedSlotsData) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        ok?: (props: SharedSlotsData) => any;
        title?: (props: SharedSlotsData) => any;
    };
    refs: {
        element: HTMLDivElement;
        cancelButton: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: import('../..').BButtonProps["pressed"];
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOffsetHover?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOpacity?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineOpacityHover?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly opacityHover?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", pressed: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                'update:pressed': (pressed: boolean | undefined) => any;
                click: (value: MouseEvent) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        okButton: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly pressed?: import('../..').BButtonProps["pressed"];
                readonly disabled?: boolean | undefined;
                readonly to?: import('vue-router').RouteLocationRaw | undefined;
                readonly pill?: boolean | undefined;
                readonly size?: import('../..').Size | undefined;
                readonly underlineOffset?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOffsetHover?: (1 | 2 | 3 | "1" | "2" | "3") | undefined;
                readonly underlineOpacity?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineOpacityHover?: (0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly underlineVariant?: (import('../..').ColorVariant | null) | undefined;
                readonly active?: boolean | undefined;
                readonly activeClass?: string | undefined;
                readonly exactActiveClass?: string | undefined;
                readonly href?: string | undefined;
                readonly icon?: boolean | undefined;
                readonly noRel?: boolean | undefined;
                readonly opacity?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly opacityHover?: (10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100") | undefined;
                readonly rel?: string | undefined;
                readonly replace?: boolean | undefined;
                readonly routerComponentName?: string | undefined;
                readonly routerTag?: string | undefined;
                readonly stretched?: boolean | undefined;
                readonly target?: import('../..').LinkTarget | undefined;
                readonly variant?: ((import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null) | undefined;
                readonly type?: import('../..').ButtonType | undefined;
                readonly tag?: string | undefined;
                readonly loading?: boolean | undefined;
                readonly loadingFill?: boolean | undefined;
                readonly loadingText?: string | undefined;
                readonly squared?: boolean | undefined;
                readonly onClick?: ((value: MouseEvent) => any) | undefined;
                readonly "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "click", value: MouseEvent) => void) & ((event: "update:pressed", pressed: boolean | undefined) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                pressed?: import('../..').BButtonProps["pressed"];
            } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
                onClick?: ((value: MouseEvent) => any) | undefined;
                "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
            }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                'update:pressed': (pressed: boolean | undefined) => any;
                click: (value: MouseEvent) => any;
            }, string, {
                disabled: boolean;
                to: import('vue-router').RouteLocationRaw;
                pill: boolean;
                size: import('../..').Size;
                underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
                underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
                underlineVariant: import('../..').ColorVariant | null;
                active: boolean;
                activeClass: string;
                exactActiveClass: string;
                href: string;
                icon: boolean;
                opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
                rel: string;
                replace: boolean;
                routerComponentName: string;
                routerTag: string;
                stretched: boolean;
                target: import('../..').LinkTarget;
                variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
                type: import('../..').ButtonType;
                tag: string;
                loading: boolean;
                loadingFill: boolean;
                loadingText: string;
                squared: boolean;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            disabled: boolean;
            to: import('vue-router').RouteLocationRaw;
            pill: boolean;
            size: import('../..').Size;
            underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
            underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
            underlineVariant: import('../..').ColorVariant | null;
            active: boolean;
            activeClass: string;
            exactActiveClass: string;
            href: string;
            icon: boolean;
            opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
            rel: string;
            replace: boolean;
            routerComponentName: string;
            routerTag: string;
            stretched: boolean;
            target: import('../..').LinkTarget;
            variant: (import('../..').ButtonVariant | ("link-primary" | "link-secondary" | "link-success" | "link-danger" | "link-warning" | "link-info" | "link-light" | "link-dark")) | null;
            type: import('../..').ButtonType;
            tag: string;
            loading: boolean;
            loadingFill: boolean;
            loadingText: string;
            squared: boolean;
        }> & Omit<Readonly<{
            pressed?: import('../..').BButtonProps["pressed"];
        } & Omit<import('../..').BButtonProps, "pressed">> & Readonly<{
            onClick?: ((value: MouseEvent) => any) | undefined;
            "onUpdate:pressed"?: ((pressed: boolean | undefined) => any) | undefined;
        }>, "disabled" | "to" | "pill" | "size" | "underlineOffset" | "underlineOffsetHover" | "underlineOpacity" | "underlineOpacityHover" | "underlineVariant" | "active" | "activeClass" | "exactActiveClass" | "href" | "icon" | "opacity" | "opacityHover" | "rel" | "replace" | "routerComponentName" | "routerTag" | "stretched" | "target" | "variant" | "type" | "tag" | "loading" | "loadingFill" | "loadingText" | "squared"> & import('vue').ShallowUnwrapRef<{}> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                loading?: (props: Record<string, never>) => any;
                'loading-spinner'?: (props: Record<string, never>) => any;
            };
        }) | null;
        fallbackFocusElement: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (trigger?: string) => void;
    id: import('vue').ComputedRef<string>;
    show: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean) => any;
    backdrop: (value: BvTriggerableEvent) => any;
    cancel: (value: BvTriggerableEvent) => any;
    close: (value: BvTriggerableEvent) => any;
    esc: (value: BvTriggerableEvent) => any;
    hidden: (value: BvTriggerableEvent) => any;
    hide: (value: BvTriggerableEvent) => any;
    'hide-prevented': () => any;
    ok: (value: BvTriggerableEvent) => any;
    show: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    shown: (value: BvTriggerableEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onOk?: ((value: BvTriggerableEvent) => any) | undefined;
    onCancel?: ((value: BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onBackdrop?: ((value: BvTriggerableEvent) => any) | undefined;
    onEsc?: ((value: BvTriggerableEvent) => any) | undefined;
}>, {
    body: string;
    autofocus: boolean;
    id: string;
    size: import('../..').Size | "xl";
    hideBackdrop: boolean;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    bodyScrolling: boolean;
    footerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseLabel: string;
    headerCloseVariant: import('../..').ButtonVariant | null;
    lazy: boolean;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noTrap: boolean;
    title: string;
    noFade: boolean;
    bodyBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    bodyTextVariant: import('../..').TextColorVariant | null;
    footerBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    footerBorderVariant: import('../../types/ColorTypes').BorderColorVariant | null;
    footerTextVariant: import('../..').TextColorVariant | null;
    footerVariant: import('../..').ColorVariant | null;
    headerBgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    headerBorderVariant: import('../../types/ColorTypes').BorderColorVariant | null;
    headerTextVariant: import('../..').TextColorVariant | null;
    headerVariant: import('../..').ColorVariant | null;
    titleTag: string;
    busy: boolean;
    transProps: Readonly<import('../..').BTransitionProps>;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    autofocusButton: "ok" | "cancel" | "close";
    bodyVariant: import('../..').ColorVariant | null;
    buttonSize: import('../..').Size;
    cancelDisabled: boolean;
    cancelTitle: string;
    cancelVariant: import('../..').ButtonVariant | null;
    centered: boolean;
    contentClass: import('../../types/AnyValuedAttributes').ClassValue;
    dialogClass: import('../../types/AnyValuedAttributes').ClassValue;
    fullscreen: boolean | import('../..').Breakpoint;
    hideFooter: boolean;
    hideHeader: boolean;
    hideHeaderClose: boolean;
    modalClass: import('../../types/AnyValuedAttributes').ClassValue;
    okDisabled: boolean;
    okOnly: boolean;
    okTitle: string;
    okVariant: import('../..').ButtonVariant | null;
    scrollable: boolean;
    titleClass: import('../../types/AnyValuedAttributes').ClassValue;
    titleSrOnly: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
