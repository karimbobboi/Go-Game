import { PropType } from 'vue';
import { AriaInvalid } from '../../types/AriaInvalid';
export declare const SLOT_NAME_LABEL = "label";
export declare const SLOT_NAME_INVALID_FEEDBACK = "invalid-feedback";
export declare const SLOT_NAME_VALID_FEEDBACK = "valid-feedback";
export declare const SLOT_NAME_DESCRIPTION = "description";
export declare const SLOT_NAME_DEFAULT = "default";
declare const _default: import('vue').DefineComponent<import('vue').ExtractPropTypes<{
    ariaInvalid: {
        type: PropType<AriaInvalid>;
        default: undefined;
    };
    contentCols: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsLg: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsMd: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsSm: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsXl: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    description: {
        type: StringConstructor[];
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    feedbackAriaLive: {
        type: StringConstructor;
        default: string;
    };
    floating: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    invalidFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    labelAlign: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignLg: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignMd: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignSm: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignXl: {
        type: StringConstructor[];
        default: undefined;
    };
    labelClass: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
        default: undefined;
    };
    labelCols: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsLg: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsMd: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsSm: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsXl: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelFor: {
        type: StringConstructor;
        default: undefined;
    };
    labelSize: {
        type: StringConstructor;
        default: undefined;
    };
    labelVisuallyHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    state: {
        type: PropType<boolean | null>;
        default: null;
    };
    tooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    validFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    validated: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    ariaDescribedby: string | null;
    computedAriaInvalid: import('vue').ComputedRef<"grammar" | "spelling" | "true" | "false" | undefined>;
    contentColProps: import('vue').ComputedRef<any>;
    isHorizontal: import('vue').ComputedRef<boolean>;
    labelAlignClasses: import('vue').ComputedRef<string[]>;
    labelColProps: import('vue').ComputedRef<any>;
    onLegendClick: (event: Readonly<MouseEvent>) => void;
    stateClass: import('vue').ComputedRef<"is-valid" | "is-invalid" | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<{
    ariaInvalid: {
        type: PropType<AriaInvalid>;
        default: undefined;
    };
    contentCols: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsLg: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsMd: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsSm: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    contentColsXl: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    description: {
        type: StringConstructor[];
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    feedbackAriaLive: {
        type: StringConstructor;
        default: string;
    };
    floating: {
        type: BooleanConstructor;
        default: boolean;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    invalidFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    labelAlign: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignLg: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignMd: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignSm: {
        type: StringConstructor[];
        default: undefined;
    };
    labelAlignXl: {
        type: StringConstructor[];
        default: undefined;
    };
    labelClass: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
        default: undefined;
    };
    labelCols: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsLg: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsMd: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsSm: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelColsXl: {
        type: (BooleanConstructor | NumberConstructor | StringConstructor)[];
        default: undefined;
    };
    labelFor: {
        type: StringConstructor;
        default: undefined;
    };
    labelSize: {
        type: StringConstructor;
        default: undefined;
    };
    labelVisuallyHidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    state: {
        type: PropType<boolean | null>;
        default: null;
    };
    tooltip: {
        type: BooleanConstructor;
        default: boolean;
    };
    validFeedback: {
        type: StringConstructor;
        default: undefined;
    };
    validated: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{}>, {
    disabled: boolean;
    ariaInvalid: AriaInvalid;
    id: string;
    state: boolean | null;
    label: string;
    tooltip: boolean;
    description: string;
    floating: boolean;
    validated: boolean;
    labelFor: string;
    labelClass: string | unknown[] | Record<string, any>;
    contentCols: string | number | boolean;
    contentColsLg: string | number | boolean;
    contentColsMd: string | number | boolean;
    contentColsSm: string | number | boolean;
    contentColsXl: string | number | boolean;
    feedbackAriaLive: string;
    invalidFeedback: string;
    labelAlign: string;
    labelAlignLg: string;
    labelAlignMd: string;
    labelAlignSm: string;
    labelAlignXl: string;
    labelCols: string | number | boolean;
    labelColsLg: string | number | boolean;
    labelColsMd: string | number | boolean;
    labelColsSm: string | number | boolean;
    labelColsXl: string | number | boolean;
    labelSize: string;
    labelVisuallyHidden: boolean;
    validFeedback: string;
}, {}, {
    BCol: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BColProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('../..').BColProps> & Readonly<{}>, {
            sm: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            lg: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            md: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            xl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            xxl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            tag: string;
            offset: import('../../types/BreakpointProps').ColsNumbers;
            cols: import('../../types/BreakpointProps').ColsNumbers | "auto";
            alignSelf: import('../..').AlignmentVertical | "auto";
            order: import('../../types/BreakpointProps').ColsNumbers;
            col: boolean;
            offsetSm: import('../../types/BreakpointProps').ColsNumbers;
            offsetMd: import('../../types/BreakpointProps').ColsNumbers;
            offsetLg: import('../../types/BreakpointProps').ColsNumbers;
            offsetXl: import('../../types/BreakpointProps').ColsNumbers;
            offsetXxl: import('../../types/BreakpointProps').ColsNumbers;
            orderSm: import('../../types/BreakpointProps').ColsNumbers;
            orderMd: import('../../types/BreakpointProps').ColsNumbers;
            orderLg: import('../../types/BreakpointProps').ColsNumbers;
            orderXl: import('../../types/BreakpointProps').ColsNumbers;
            orderXxl: import('../../types/BreakpointProps').ColsNumbers;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BColProps> & Readonly<{}>, {}, {}, {}, {}, {
            sm: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            lg: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            md: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            xl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            xxl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
            tag: string;
            offset: import('../../types/BreakpointProps').ColsNumbers;
            cols: import('../../types/BreakpointProps').ColsNumbers | "auto";
            alignSelf: import('../..').AlignmentVertical | "auto";
            order: import('../../types/BreakpointProps').ColsNumbers;
            col: boolean;
            offsetSm: import('../../types/BreakpointProps').ColsNumbers;
            offsetMd: import('../../types/BreakpointProps').ColsNumbers;
            offsetLg: import('../../types/BreakpointProps').ColsNumbers;
            offsetXl: import('../../types/BreakpointProps').ColsNumbers;
            offsetXxl: import('../../types/BreakpointProps').ColsNumbers;
            orderSm: import('../../types/BreakpointProps').ColsNumbers;
            orderMd: import('../../types/BreakpointProps').ColsNumbers;
            orderLg: import('../../types/BreakpointProps').ColsNumbers;
            orderXl: import('../../types/BreakpointProps').ColsNumbers;
            orderXxl: import('../../types/BreakpointProps').ColsNumbers;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('../..').BColProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        sm: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
        lg: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
        md: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
        xl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
        xxl: boolean | import('../../types/BreakpointProps').ColsNumbers | "auto";
        tag: string;
        offset: import('../../types/BreakpointProps').ColsNumbers;
        cols: import('../../types/BreakpointProps').ColsNumbers | "auto";
        alignSelf: import('../..').AlignmentVertical | "auto";
        order: import('../../types/BreakpointProps').ColsNumbers;
        col: boolean;
        offsetSm: import('../../types/BreakpointProps').ColsNumbers;
        offsetMd: import('../../types/BreakpointProps').ColsNumbers;
        offsetLg: import('../../types/BreakpointProps').ColsNumbers;
        offsetXl: import('../../types/BreakpointProps').ColsNumbers;
        offsetXxl: import('../../types/BreakpointProps').ColsNumbers;
        orderSm: import('../../types/BreakpointProps').ColsNumbers;
        orderMd: import('../../types/BreakpointProps').ColsNumbers;
        orderLg: import('../../types/BreakpointProps').ColsNumbers;
        orderXl: import('../../types/BreakpointProps').ColsNumbers;
        orderXxl: import('../../types/BreakpointProps').ColsNumbers;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
        };
    });
    BFormInvalidFeedback: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {
            id: string;
            state: boolean | null;
            text: string;
            tag: string;
            role: string;
            tooltip: boolean;
            ariaLive: string;
            forceShow: boolean;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, {
            id: string;
            state: boolean | null;
            text: string;
            tag: string;
            role: string;
            tooltip: boolean;
            ariaLive: string;
            forceShow: boolean;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        id: string;
        state: boolean | null;
        text: string;
        tag: string;
        role: string;
        tooltip: boolean;
        ariaLive: string;
        forceShow: boolean;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
        };
    });
    BFormRow: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BFormRowProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('../..').BFormRowProps> & Readonly<{}>, {
            tag: string;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BFormRowProps> & Readonly<{}>, {}, {}, {}, {}, {
            tag: string;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('../..').BFormRowProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        tag: string;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default: (props: Record<string, never>) => any;
        }> & {
            default: (props: Record<string, never>) => any;
        };
    });
    BFormText: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BFormTextProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('../..').BFormTextProps> & Readonly<{}>, {
            id: string;
            text: string;
            tag: string;
            textVariant: import('../..').TextColorVariant | null;
            inline: boolean;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BFormTextProps> & Readonly<{}>, {}, {}, {}, {}, {
            id: string;
            text: string;
            tag: string;
            textVariant: import('../..').TextColorVariant | null;
            inline: boolean;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('../..').BFormTextProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        id: string;
        text: string;
        tag: string;
        textVariant: import('../..').TextColorVariant | null;
        inline: boolean;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
        };
    });
    BFormValidFeedback: {
        new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {
            id: string;
            state: boolean | null;
            text: string;
            tag: string;
            role: string;
            tooltip: boolean;
            ariaLive: string;
            forceShow: boolean;
        }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, {
            id: string;
            state: boolean | null;
            text: string;
            tag: string;
            role: string;
            tooltip: boolean;
            ariaLive: string;
            forceShow: boolean;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import('vue').ComponentOptionsBase<Readonly<import('../..').BFormFeedbackSharedProps> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
        id: string;
        state: boolean | null;
        text: string;
        tag: string;
        role: string;
        tooltip: boolean;
        ariaLive: string;
        forceShow: boolean;
    }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default?: (props: Record<string, never>) => any;
        }> & {
            default?: (props: Record<string, never>) => any;
        };
    });
}, {}, string, import('vue').ComponentProvideOptions, true, {}, any>;
export default _default;
