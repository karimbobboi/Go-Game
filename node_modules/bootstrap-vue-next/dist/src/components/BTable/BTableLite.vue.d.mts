import { BTableLiteProps } from '../../types/ComponentProps';
import { TableField, TableRowThead } from '../../types/TableTypes';
declare const _default: <T>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly "onHead-clicked"?: ((key: string, field: TableField<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
        readonly "onRow-clicked"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        readonly "onRow-dbl-clicked"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        readonly "onRow-hovered"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        readonly "onRow-unhovered"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
    } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{}> & Readonly<{
        "onHead-clicked"?: ((key: string, field: TableField<T>, event: MouseEvent, isFooter: boolean) => any) | undefined;
        "onRow-clicked"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        "onRow-dbl-clicked"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        "onRow-hovered"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
        "onRow-unhovered"?: ((item: T, index: number, event: MouseEvent) => any) | undefined;
    }>, never>, "onHead-clicked" | "onRow-clicked" | "onRow-dbl-clicked" | "onRow-hovered" | "onRow-unhovered"> & BTableLiteProps<T>> & import('vue').PublicProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: Partial<Record<string, (_: {
        label: string | undefined;
        column: import('../../types/LiteralUnion').LiteralUnion<string | number | symbol>;
        field: TableField & {
            _noHeader?: true;
        };
        isFoot: boolean;
    }) => any>> & Partial<Record<string, (_: {
        value: unknown;
        unformatted: unknown;
        index: number;
        item: T;
        field: TableField & {
            _noHeader?: true;
        };
        items: readonly T[];
        toggleDetails: () => void;
        detailsShowing: boolean;
    }) => any>> & Partial<Record<string, (_: {
        label: string | undefined;
        column: import('../../types/LiteralUnion').LiteralUnion<string | number | symbol>;
        field: TableField & {
            _noHeader?: true;
        };
        isFoot: boolean;
    }) => any>> & {
        "thead-top"?(_: {}): any;
        "thead-sub"?(_: {
            key: import('../../types/LiteralUnion').LiteralUnion<string | number | symbol>;
            label?: string;
            headerTitle?: string;
            headerAbbr?: string;
            class?: import('../../types/AnyValuedAttributes').ClassValue;
            formatter?: import('../..').TableFieldFormatter<any> | undefined;
            sortable?: boolean;
            sortKey?: string;
            sortDirection?: string;
            sortByFormatted?: boolean | import('../..').TableFieldFormatter<any> | undefined;
            filterByFormatted?: boolean | import('../..').TableFieldFormatter<any> | undefined;
            tdClass?: import('../../types/TableTypes').TableStrictClassValue | ((value: unknown, key: string, item: any) => import('../../types/TableTypes').TableStrictClassValue) | undefined;
            thClass?: import('../../types/AnyValuedAttributes').ClassValue;
            thStyle?: import('vue').StyleValue;
            variant?: import('../..').ColorVariant | null;
            tdAttr?: import('../../types/AnyValuedAttributes').AttrsValue | ((value: unknown, key: string, item: any) => import('../../types/AnyValuedAttributes').AttrsValue) | undefined;
            thAttr?: import('../../types/AnyValuedAttributes').AttrsValue | ((value: unknown, key: string, item: any, type: TableRowThead) => import('../../types/AnyValuedAttributes').AttrsValue) | undefined;
            isRowHeader?: boolean;
            stickyColumn?: boolean;
            _noHeader?: true;
            items: (TableField & {
                _noHeader?: true;
            })[];
        }): any;
        "custom-body"?(_: {
            fields: (TableField & {
                _noHeader?: true;
            })[];
            items: readonly T[];
            columns: number;
        }): any;
        "top-row"?(_: {}): any;
        "row-details"?(_: {
            item: T & Record<string, unknown> & {
                _rowVariant?: import('../..').ColorVariant | null;
                _cellVariants?: Partial<Record<string, keyof import('../..').BaseColorVariant>> | undefined;
                _showDetails?: boolean;
            };
            toggleDetails: () => void;
            fields: import('../..').TableFieldRaw<T>[];
            index: number;
        }): any;
        empty?(_: {
            items: readonly T[];
        }): any;
        "bottom-row"?(_: {}): any;
        "custom-foot"?(_: {
            fields: (TableField & {
                _noHeader?: true;
            })[];
            items: readonly T[];
            columns: number;
        }): any;
        "table-caption"?(_: {}): any;
    };
    emit: ((evt: "head-clicked", key: string, field: TableField<T>, event: MouseEvent, isFooter: boolean) => void) & ((evt: "row-clicked", item: T, index: number, event: MouseEvent) => void) & ((evt: "row-dbl-clicked", item: T, index: number, event: MouseEvent) => void) & ((evt: "row-hovered", item: T, index: number, event: MouseEvent) => void) & ((evt: "row-unhovered", item: T, index: number, event: MouseEvent) => void);
}>) => import('vue').VNode<import('vue').RendererNode, import('vue').RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
