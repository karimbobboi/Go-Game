import { BPopoverProps, BTooltipProps } from '../../types/ComponentProps';
declare let __VLS_typeProps: Omit<BTooltipProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: BTooltipProps['modelValue'];
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Partial<Record<NonNullable<string | number>, (_: any) => any>>;
    refs: {
        popover: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly modelValue?: Exclude<BPopoverProps["modelValue"], undefined> | undefined;
                readonly id?: string | undefined;
                readonly target?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                readonly variant?: (import('../..').ColorVariant | null) | undefined;
                readonly placement?: import('../..').PopoverPlacement | undefined;
                readonly title?: string | undefined;
                readonly noFade?: boolean | undefined;
                readonly boundary?: (import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary) | undefined;
                readonly boundaryPadding?: import('../../../node_modules/@floating-ui/core').Padding | undefined;
                readonly floatingMiddleware?: import('@floating-ui/vue').Middleware[] | undefined;
                readonly noFlip?: boolean | undefined;
                readonly noShift?: boolean | undefined;
                readonly noSize?: boolean | undefined;
                readonly offset?: (import('../../types/CommonTypes').Numberish | null) | undefined;
                readonly strategy?: import('../../../node_modules/@floating-ui/core').Strategy | undefined;
                readonly click?: boolean | undefined;
                readonly closeOnHide?: boolean | undefined;
                readonly content?: string | undefined;
                readonly customClass?: import('../../types/AnyValuedAttributes').ClassValue;
                readonly delay?: (number | Readonly<{
                    show: number;
                    hide: number;
                }>) | undefined;
                readonly html?: boolean | undefined;
                readonly inline?: boolean | undefined;
                readonly manual?: boolean | undefined;
                readonly noAutoClose?: boolean | undefined;
                readonly noHide?: boolean | undefined;
                readonly noninteractive?: boolean | undefined;
                readonly persistent?: boolean | undefined;
                readonly realtime?: boolean | undefined;
                readonly reference?: (string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null) | undefined;
                readonly tooltip?: boolean | undefined;
                readonly teleportDisabled?: import('vue').TeleportProps["disabled"];
                readonly teleportTo?: import('vue').TeleportProps["to"];
                readonly onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
                readonly onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                readonly "onHide-prevented"?: (() => any) | undefined;
                readonly "onShow-prevented"?: (() => any) | undefined;
                readonly onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & Readonly<{
                modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
            } & Omit<BPopoverProps, "modelValue">> & Readonly<{
                onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
                onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onHide-prevented"?: (() => any) | undefined;
                "onShow-prevented"?: (() => any) | undefined;
                onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            }>;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: ((event: "show", value: import('../..').BvTriggerableEvent) => void) & ((event: "hidden", value: import('../..').BvTriggerableEvent) => void) & ((event: "update:modelValue", modelValue: boolean) => void) & ((event: "hide", value: import('../..').BvTriggerableEvent) => void) & ((event: "hide-prevented") => void) & ((event: "show-prevented") => void) & ((event: "shown", value: import('../..').BvTriggerableEvent) => void);
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
            } & Omit<BPopoverProps, "modelValue">> & Readonly<{
                onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
                onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
                "onHide-prevented"?: (() => any) | undefined;
                "onShow-prevented"?: (() => any) | undefined;
                onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            }>, {
                hide: (e: Readonly<Event>) => void;
                show: () => void;
                toggle: (e?: Event) => void;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                'update:modelValue': (modelValue: boolean) => any;
                hidden: (value: import('../..').BvTriggerableEvent) => any;
                hide: (value: import('../..').BvTriggerableEvent) => any;
                'hide-prevented': () => any;
                show: (value: import('../..').BvTriggerableEvent) => any;
                'show-prevented': () => any;
                shown: (value: import('../..').BvTriggerableEvent) => any;
            }, string, {
                id: string;
                target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
                variant: import('../..').ColorVariant | null;
                placement: import('../..').PopoverPlacement;
                title: string;
                noFade: boolean;
                boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
                boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
                floatingMiddleware: import('@floating-ui/vue').Middleware[];
                noFlip: boolean;
                noShift: boolean;
                noSize: boolean;
                offset: import('../../types/CommonTypes').Numberish | null;
                strategy: import('../../../node_modules/@floating-ui/core').Strategy;
                click: boolean;
                closeOnHide: boolean;
                content: string;
                customClass: import('../../types/AnyValuedAttributes').ClassValue;
                delay: number | Readonly<{
                    show: number;
                    hide: number;
                }>;
                html: boolean;
                inline: boolean;
                manual: boolean;
                noAutoClose: boolean;
                noHide: boolean;
                noninteractive: boolean;
                persistent: boolean;
                realtime: boolean;
                reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
                tooltip: boolean;
                teleportDisabled: boolean;
                teleportTo: string | import('vue').RendererElement | null;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            id: string;
            target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            variant: import('../..').ColorVariant | null;
            placement: import('../..').PopoverPlacement;
            title: string;
            noFade: boolean;
            boundary: import('@floating-ui/vue').Boundary | import('../../../node_modules/@floating-ui/core').RootBoundary;
            boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
            floatingMiddleware: import('@floating-ui/vue').Middleware[];
            noFlip: boolean;
            noShift: boolean;
            noSize: boolean;
            offset: import('../../types/CommonTypes').Numberish | null;
            strategy: import('../../../node_modules/@floating-ui/core').Strategy;
            click: boolean;
            closeOnHide: boolean;
            content: string;
            customClass: import('../../types/AnyValuedAttributes').ClassValue;
            delay: number | Readonly<{
                show: number;
                hide: number;
            }>;
            html: boolean;
            inline: boolean;
            manual: boolean;
            noAutoClose: boolean;
            noHide: boolean;
            noninteractive: boolean;
            persistent: boolean;
            realtime: boolean;
            reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
            tooltip: boolean;
            teleportDisabled: boolean;
            teleportTo: string | import('vue').RendererElement | null;
        }> & Omit<Readonly<{
            modelValue?: Exclude<BPopoverProps["modelValue"], undefined>;
        } & Omit<BPopoverProps, "modelValue">> & Readonly<{
            onShow?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            onHidden?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
            onHide?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
            "onHide-prevented"?: (() => any) | undefined;
            "onShow-prevented"?: (() => any) | undefined;
            onShown?: ((value: import('../..').BvTriggerableEvent) => any) | undefined;
        }>, "show" | "toggle" | "hide" | ("id" | "target" | "variant" | "placement" | "title" | "noFade" | "boundary" | "boundaryPadding" | "floatingMiddleware" | "noFlip" | "noShift" | "noSize" | "offset" | "strategy" | "click" | "closeOnHide" | "content" | "customClass" | "delay" | "html" | "inline" | "manual" | "noAutoClose" | "noHide" | "noninteractive" | "persistent" | "realtime" | "reference" | "tooltip" | "teleportDisabled" | "teleportTo")> & import('vue').ShallowUnwrapRef<{
            hide: (e: Readonly<Event>) => void;
            show: () => void;
            toggle: (e?: Event) => void;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: Readonly<{
                default?: (props: Record<string, never>) => any;
                target?: (props: {
                    show: () => void;
                    hide: (e: Event) => void;
                    toggle: (e: Event) => void;
                    showState: boolean;
                }) => any;
                title?: (props: Record<string, never>) => any;
            }> & {
                default?: (props: Record<string, never>) => any;
                target?: (props: {
                    show: () => void;
                    hide: (e: Event) => void;
                    toggle: (e: Event) => void;
                    showState: boolean;
                }) => any;
                title?: (props: Record<string, never>) => any;
            };
        }) | null;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: ((e: Readonly<Event>) => void) | undefined;
    show: (() => void) | undefined;
    toggle: ((e?: Event) => void) | undefined;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean | undefined) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: boolean | undefined) => any) | undefined;
}>, {
    id: string;
    target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    variant: import('../..').ColorVariant | null;
    placement: import('../..').PopoverPlacement;
    title: string;
    noFade: boolean;
    floatingMiddleware: import('@floating-ui/vue').Middleware[];
    noFlip: boolean;
    noShift: boolean;
    offset: import('../../types/CommonTypes').Numberish | null;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    click: boolean;
    content: string;
    customClass: import('../../types/AnyValuedAttributes').ClassValue;
    delay: number | Readonly<{
        show: number;
        hide: number;
    }>;
    html: boolean;
    inline: boolean;
    manual: boolean;
    noAutoClose: boolean;
    noHide: boolean;
    noninteractive: boolean;
    realtime: boolean;
    reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
    interactive: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
