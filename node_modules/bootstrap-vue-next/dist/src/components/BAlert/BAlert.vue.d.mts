import { BAlertProps } from '../../types/ComponentProps';
declare let __VLS_typeProps: Omit<BAlertProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BAlertProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        close?: (props: Record<string, never>) => any;
        default?: (props: Record<string, never>) => any;
    }> & {
        close?: (props: Record<string, never>) => any;
        default?: (props: Record<string, never>) => any;
    };
    refs: {
        element: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    pause: () => void;
    resume: () => void;
    stop: () => void;
    restart: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: number | boolean) => any;
    close: () => any;
    'close-countdown': (value: number) => any;
    closed: () => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onClose?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: number | boolean) => any) | undefined;
    "onClose-countdown"?: ((value: number) => any) | undefined;
    onClosed?: (() => any) | undefined;
}>, {
    variant: import('../..').ColorVariant | null;
    interval: number | "requestAnimationFrame";
    noHoverPause: boolean;
    noResumeOnHoverLeave: boolean;
    showOnPause: boolean;
    closeClass: import('../../types/AnyValuedAttributes').ClassValue;
    closeContent: string;
    closeLabel: string;
    closeVariant: import('../..').ButtonVariant | null;
    dismissible: boolean;
    fade: boolean;
    immediate: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
