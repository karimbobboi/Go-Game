import { BOffcanvasProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
import { Placement } from '../../types/Alignment';
declare let __VLS_typeProps: Omit<BOffcanvasProps, 'modelValue'>;
type SharedSlotsData = {
    visible: boolean;
    placement: Placement;
    hide: (trigger?: string) => void;
};
type __VLS_PublicProps = {
    modelValue?: Exclude<BOffcanvasProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        backdrop?: (props: Record<string, never>) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        title?: (props: SharedSlotsData) => any;
    }> & {
        backdrop?: (props: Record<string, never>) => any;
        default?: (props: SharedSlotsData) => any;
        footer?: (props: SharedSlotsData) => any;
        header?: (props: SharedSlotsData) => any;
        'header-close'?: (props: Record<string, never>) => any;
        title?: (props: SharedSlotsData) => any;
    };
    refs: {
        element: HTMLDivElement;
        fallbackFocusElement: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (trigger?: string) => void;
    show: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean) => any;
    close: (value: BvTriggerableEvent) => any;
    esc: (value: BvTriggerableEvent) => any;
    hidden: (value: BvTriggerableEvent) => any;
    hide: (value: BvTriggerableEvent) => any;
    'hide-prevented': () => any;
    show: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    shown: (value: BvTriggerableEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    onEsc?: ((value: BvTriggerableEvent) => any) | undefined;
}>, {
    id: string;
    hideBackdrop: boolean;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    bodyScrolling: boolean;
    footerClass: string;
    headerClass: string;
    headerCloseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerCloseLabel: string;
    headerCloseVariant: import('../..').ButtonVariant | null;
    lazy: boolean;
    noCloseOnBackdrop: boolean;
    noCloseOnEsc: boolean;
    noFocus: boolean;
    noHeader: boolean;
    noTrap: boolean;
    noHeaderClose: boolean;
    placement: Placement;
    shadow: import('../..').Size | boolean;
    title: string;
    width: string;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
