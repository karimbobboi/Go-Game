import { BFormCheckboxProps } from '../../types/ComponentProps';
import { CheckboxValue } from '../../types/CheckboxTypes';
declare let __VLS_typeProps: Omit<BFormCheckboxProps, 'modelValue' | 'indeterminate'>;
type __VLS_PublicProps = {
    modelValue?: BFormCheckboxProps['modelValue'];
    'indeterminate'?: Exclude<BFormCheckboxProps['indeterminate'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
    };
    refs: {
        input: HTMLInputElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    blur: () => void;
    element: import('vue').Ref<HTMLElement | null, HTMLElement | null>;
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: CheckboxValue | readonly CheckboxValue[] | undefined) => any;
    'update:indeterminate': (indeterminate: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: CheckboxValue | readonly CheckboxValue[] | undefined) => any) | undefined;
    "onUpdate:indeterminate"?: ((indeterminate: boolean) => any) | undefined;
}>, {
    disabled: boolean;
    autofocus: boolean;
    form: string;
    id: string;
    name: string;
    required: boolean;
    size: import('../..').Size;
    state: boolean | null;
    button: boolean;
    wrapperAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    value: string | boolean | CheckboxValue;
    ariaLabel: string;
    inline: boolean;
    reverse: boolean;
    switch: boolean;
    plain: boolean;
    ariaLabelledby: string;
    buttonGroup: boolean;
    buttonVariant: import('../..').ButtonVariant | null;
    uncheckedValue: CheckboxValue;
    inputClass: import('../../types/AnyValuedAttributes').ClassValue;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
