import { BAccordionItemProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
declare let __VLS_typeProps: Omit<BAccordionItemProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BAccordionItemProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        title?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        title?: (props: Record<string, never>) => any;
    };
    refs: {};
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean) => any;
    hidden: () => any;
    hide: (value: BvTriggerableEvent) => any;
    'hide-prevented': () => any;
    show: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    shown: () => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: (() => any) | undefined;
}>, {
    id: string;
    wrapperAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    tag: string;
    bodyAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    title: string;
    headerTag: string;
    isNav: boolean;
    horizontal: boolean;
    toggle: boolean;
    visible: boolean;
    buttonAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    buttonClass: import('../../types/AnyValuedAttributes').ClassValue;
    collapseClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
