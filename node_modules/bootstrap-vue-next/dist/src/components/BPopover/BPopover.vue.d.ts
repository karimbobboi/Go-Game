import { Boundary, Middleware, RootBoundary } from '@floating-ui/vue';
import { BPopoverProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
declare let __VLS_typeProps: Omit<BPopoverProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BPopoverProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
        target?: (props: {
            show: () => void;
            hide: (e: Event) => void;
            toggle: (e: Event) => void;
            showState: boolean;
        }) => any;
        title?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
        target?: (props: {
            show: () => void;
            hide: (e: Event) => void;
            toggle: (e: Event) => void;
            showState: boolean;
        }) => any;
        title?: (props: Record<string, never>) => any;
    };
    refs: {
        placeholder: HTMLSpanElement;
        element: HTMLDivElement;
        arrow: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    hide: (e: Readonly<Event>) => void;
    show: () => void;
    toggle: (e?: Event) => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: boolean) => any;
    hidden: (value: BvTriggerableEvent) => any;
    hide: (value: BvTriggerableEvent) => any;
    'hide-prevented': () => any;
    show: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    shown: (value: BvTriggerableEvent) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
}>, {
    id: string;
    target: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    variant: import('../..').ColorVariant | null;
    placement: import('../..').PopoverPlacement;
    title: string;
    noFade: boolean;
    boundary: Boundary | RootBoundary;
    boundaryPadding: import('../../../node_modules/@floating-ui/core').Padding;
    floatingMiddleware: Middleware[];
    noFlip: boolean;
    noShift: boolean;
    noSize: boolean;
    offset: import('../../types/CommonTypes').Numberish | null;
    strategy: import('../../../node_modules/@floating-ui/core').Strategy;
    click: boolean;
    closeOnHide: boolean;
    content: string;
    customClass: import('../../types/AnyValuedAttributes').ClassValue;
    delay: number | Readonly<{
        show: number;
        hide: number;
    }>;
    html: boolean;
    inline: boolean;
    manual: boolean;
    noAutoClose: boolean;
    noHide: boolean;
    noninteractive: boolean;
    persistent: boolean;
    realtime: boolean;
    reference: string | Readonly<import('vue').ComponentPublicInstance> | Readonly<HTMLElement> | null;
    tooltip: boolean;
    teleportDisabled: boolean;
    teleportTo: string | import('vue').RendererElement | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
