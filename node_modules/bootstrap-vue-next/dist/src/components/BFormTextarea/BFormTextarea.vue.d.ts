import { BFormTextareaProps } from '../../types/ComponentProps';
declare let __VLS_typeProps: Omit<BFormTextareaProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BFormTextareaProps['modelValue'], undefined>;
    modelModifiers?: Record<'trim' | 'lazy' | 'number', true>;
} & typeof __VLS_typeProps;
declare const _default: import('vue').DefineComponent<__VLS_PublicProps, {
    blur: () => void;
    element: import('vue').Ref<HTMLInputElement | null, HTMLInputElement | null>;
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: import('../../types/CommonTypes').Numberish | null) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: import('../../types/CommonTypes').Numberish | null) => any) | undefined;
}>, {
    disabled: boolean;
    ariaInvalid: import('../..').AriaInvalid;
    autocomplete: string;
    autofocus: boolean;
    form: string;
    formatter: (val: string, evt: Event) => string;
    id: string;
    lazyFormatter: boolean;
    list: string;
    modelValue: Exclude<BFormTextareaProps["modelValue"], undefined>;
    name: string;
    placeholder: string;
    plaintext: boolean;
    readonly: boolean;
    required: boolean;
    size: import('../..').Size;
    state: boolean | null;
    noResize: boolean;
    rows: import('../../types/CommonTypes').Numberish;
    wrap: string;
    debounce: import('../../types/CommonTypes').Numberish;
    debounceMaxWait: import('../../types/CommonTypes').Numberish;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export default _default;
