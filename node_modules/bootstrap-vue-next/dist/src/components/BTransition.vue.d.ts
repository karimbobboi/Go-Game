import { BTransitionProps } from '../types/ComponentProps';
declare function __VLS_template(): {
    slots: Readonly<{
        default?: (props: Record<string, never>) => any;
    }> & {
        default?: (props: Record<string, never>) => any;
    };
    refs: {};
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<BTransitionProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'after-appear': (value: Element) => any;
    'after-enter': (value: Element) => any;
    'after-leave': (value: Element) => any;
    appear: (value: Element) => any;
    'before-appear': (value: Element) => any;
    'before-enter': (value: Element) => any;
    'before-leave': (value: Element) => any;
    enter: (value: Element) => any;
    'appear-cancelled': (value: Element) => any;
    'enter-cancelled': (value: Element) => any;
    leave: (value: Element) => any;
    'leave-cancelled': (value: Element) => any;
}, string, import('vue').PublicProps, Readonly<BTransitionProps> & Readonly<{
    onAppear?: ((value: Element) => any) | undefined;
    "onAfter-appear"?: ((value: Element) => any) | undefined;
    "onAfter-enter"?: ((value: Element) => any) | undefined;
    "onAfter-leave"?: ((value: Element) => any) | undefined;
    "onBefore-appear"?: ((value: Element) => any) | undefined;
    "onBefore-enter"?: ((value: Element) => any) | undefined;
    "onBefore-leave"?: ((value: Element) => any) | undefined;
    onEnter?: ((value: Element) => any) | undefined;
    "onAppear-cancelled"?: ((value: Element) => any) | undefined;
    "onEnter-cancelled"?: ((value: Element) => any) | undefined;
    onLeave?: ((value: Element) => any) | undefined;
    "onLeave-cancelled"?: ((value: Element) => any) | undefined;
}>, {
    noFade: boolean;
    transProps: Readonly<import('vue').TransitionProps>;
    appear: boolean;
    mode: import('..').TransitionMode;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
