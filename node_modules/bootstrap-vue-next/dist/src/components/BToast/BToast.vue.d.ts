import { BToastProps } from '../../types/ComponentProps';
import { BvTriggerableEvent } from '../../utils';
declare let __VLS_typeProps: Omit<BToastProps, 'modelValue'>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BToastProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: {
        title?(_: {
            hide: (trigger?: string) => void;
        }): any;
        default?(_: {
            hide: (trigger?: string) => void;
        }): any;
    };
    refs: {
        element: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    pause: () => void;
    restart: () => void;
    resume: () => void;
    stop: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: number | boolean) => any;
    close: (value: BvTriggerableEvent) => any;
    'close-countdown': (value: number) => any;
    hide: (value: BvTriggerableEvent) => any;
    hidden: (value: BvTriggerableEvent) => any;
    show: (value: BvTriggerableEvent) => any;
    shown: (value: BvTriggerableEvent) => any;
    'show-prevented': () => any;
    'hide-prevented': () => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onShow?: ((value: BvTriggerableEvent) => any) | undefined;
    onClose?: ((value: BvTriggerableEvent) => any) | undefined;
    onHidden?: ((value: BvTriggerableEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: number | boolean) => any) | undefined;
    onHide?: ((value: BvTriggerableEvent) => any) | undefined;
    "onHide-prevented"?: (() => any) | undefined;
    "onShow-prevented"?: (() => any) | undefined;
    onShown?: ((value: BvTriggerableEvent) => any) | undefined;
    "onClose-countdown"?: ((value: number) => any) | undefined;
}>, {
    disabled: boolean;
    to: import('vue-router').RouteLocationRaw;
    body: string;
    id: string;
    underlineOffset: 1 | 2 | 3 | "1" | "2" | "3";
    underlineOffsetHover: 1 | 2 | 3 | "1" | "2" | "3";
    underlineOpacity: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
    underlineOpacityHover: 0 | 10 | 25 | 50 | 75 | 100 | "0" | "10" | "25" | "50" | "75" | "100";
    underlineVariant: import('../..').ColorVariant | null;
    active: boolean;
    activeClass: string;
    exactActiveClass: string;
    href: string;
    icon: boolean;
    noRel: boolean;
    opacity: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
    opacityHover: 10 | 25 | 50 | 75 | 100 | "10" | "25" | "50" | "75" | "100";
    rel: string;
    replace: boolean;
    routerComponentName: string;
    stretched: boolean;
    target: import('../..').LinkTarget;
    variant: import('../..').ColorVariant | null;
    bodyClass: import('../../types/AnyValuedAttributes').ClassValue;
    headerClass: import('../../types/AnyValuedAttributes').ClassValue;
    title: string;
    noFade: boolean;
    bgVariant: import('../../types/ColorTypes').BgColorVariant | null;
    textVariant: import('../..').TextColorVariant | null;
    headerTag: string;
    interval: number | "requestAnimationFrame";
    isStatus: boolean;
    noCloseButton: boolean;
    noHoverPause: boolean;
    noResumeOnHoverLeave: boolean;
    progressProps: Omit<import('../..').BProgressBarProps, "label" | "labelHtml" | "max" | "value">;
    showOnPause: boolean;
    solid: boolean;
    toastClass: import('../../types/AnyValuedAttributes').ClassValue;
    transProps: Readonly<import('../..').BTransitionProps>;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
