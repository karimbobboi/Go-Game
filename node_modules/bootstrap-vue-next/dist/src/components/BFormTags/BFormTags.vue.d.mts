import { BFormTagsProps } from '../../types/ComponentProps';
import { ClassValue } from '../../types/AnyValuedAttributes';
import { ColorVariant } from '../../types/ColorTypes';
declare let __VLS_typeProps: Omit<BFormTagsProps, 'modelValue'>;
declare const slotAttrs: import('vue').ComputedRef<{
    addButtonText: string;
    addButtonVariant: keyof import('../..').BaseButtonVariant | null;
    addTag: (tag?: string) => void;
    disableAddButton: boolean;
    disabled: boolean;
    duplicateTagText: string;
    duplicateTags: string[];
    form: string | undefined;
    inputAttrs: {
        disabled: boolean;
        form: string | undefined;
        id: string;
        value: string;
    };
    inputClass: any;
    inputHandlers: {
        input: (e: Readonly<Event> | string) => void;
        keydown: (e: Readonly<KeyboardEvent>) => void;
        change: (e: Readonly<Event>) => void;
    };
    inputId: string;
    inputType: import('../..').InputType;
    invalidTagText: string;
    invalidTags: string[];
    isDuplicate: boolean;
    isInvalid: boolean;
    isLimitReached: boolean;
    limitTagsText: string;
    limit: number;
    noTagRemove: boolean;
    placeholder: string;
    removeTag: (tag?: string) => void;
    required: boolean;
    separator: string | readonly string[] | undefined;
    size: keyof import('../..').BaseSize;
    state: boolean | null;
    tagClass: any;
    tagPills: boolean;
    tagRemoveLabel: string | undefined;
    tagVariant: keyof import('../..').BaseColorVariant | null;
    tags: string[];
}>;
type __VLS_PublicProps = {
    modelValue?: Exclude<BFormTagsProps['modelValue'], undefined>;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: Readonly<{
        'add-button-text'?: (props: Record<string, never>) => any;
        default?: (props: typeof slotAttrs.value) => any;
        tag?: (props: {
            tag: string;
            tagClass: ClassValue;
            tagVariant: ColorVariant | null;
            tagPills: boolean;
            removeTag: (tag?: string) => void;
        }) => any;
    }> & {
        'add-button-text'?: (props: Record<string, never>) => any;
        default?: (props: typeof slotAttrs.value) => any;
        tag?: (props: {
            tag: string;
            tagClass: ClassValue;
            tagVariant: ColorVariant | null;
            tagPills: boolean;
            removeTag: (tag?: string) => void;
        }) => any;
    };
    refs: {
        input: HTMLInputElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {
    blur: () => void;
    element: import('vue').Ref<HTMLInputElement | null, HTMLInputElement | null>;
    focus: () => void;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    'update:modelValue': (modelValue: readonly string[]) => any;
    blur: (value: FocusEvent) => any;
    focus: (value: FocusEvent) => any;
    focusin: (value: FocusEvent) => any;
    focusout: (value: FocusEvent) => any;
    'tag-state': (...args: string[][]) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    onBlur?: ((value: FocusEvent) => any) | undefined;
    onFocus?: ((value: FocusEvent) => any) | undefined;
    "onUpdate:modelValue"?: ((modelValue: readonly string[]) => any) | undefined;
    onFocusin?: ((value: FocusEvent) => any) | undefined;
    onFocusout?: ((value: FocusEvent) => any) | undefined;
    "onTag-state"?: ((...args: string[][]) => any) | undefined;
}>, {
    disabled: boolean;
    autofocus: boolean;
    form: string;
    name: string;
    placeholder: string;
    required: boolean;
    size: import('../..').Size;
    state: boolean | null;
    separator: string | readonly string[];
    inputAttrs: Readonly<import('../../types/AnyValuedAttributes').AttrsValue>;
    inputClass: ClassValue;
    addButtonText: string;
    addButtonVariant: import('../..').ButtonVariant | null;
    addOnChange: boolean;
    duplicateTagText: string;
    inputId: string;
    inputType: import('../..').InputType;
    invalidTagText: string;
    limit: import('../../types/CommonTypes').Numberish;
    limitTagsText: string;
    noAddOnEnter: boolean;
    noOuterFocus: boolean;
    noTagRemove: boolean;
    removeOnDelete: boolean;
    tagClass: ClassValue;
    tagPills: boolean;
    tagRemoveLabel: string;
    tagRemovedLabel: string;
    tagValidator: (t: string) => boolean;
    tagVariant: ColorVariant | null;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
