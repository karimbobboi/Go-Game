{"version":3,"file":"index.umd.js","sources":["../../../../src/plugins/tooltip/index.ts"],"sourcesContent":["import {markRaw, type Plugin, ref, toRef, watch} from 'vue'\nimport {tooltipPluginKey} from '../../utils/keys'\nimport type {\n  PrivateOrchestratedTooltip,\n  TooltipOrchestratorMapValue,\n  TooltipOrchestratorShowParam,\n} from '../../types/ComponentOrchestratorTypes'\n\nexport const tooltipPlugin: Plugin = {\n  install(app) {\n    const tooltips = ref(new Map<symbol, TooltipOrchestratorMapValue>())\n\n    /**\n     * @returns {symbol} A symbol that corresponds to its unique id. You can pass this id to the hide function to force a Toast to hide\n     */\n    const show = (obj: TooltipOrchestratorShowParam): symbol => {\n      const resolvedProps = toRef(obj.props)\n\n      const _self = Symbol()\n\n      watch(\n        obj.ref,\n        (newValue) => {\n          if (!newValue) {\n            tooltips.value.delete(_self)\n          } else {\n            tooltips.value.set(_self, {\n              component: !obj.component ? undefined : markRaw(obj.component),\n              props: {...resolvedProps.value, _modelValue: false, _reference: newValue},\n            })\n          }\n        },\n        {\n          immediate: true,\n        }\n      )\n\n      watch(resolvedProps, (newValue) => {\n        const previous = tooltips.value.get(_self)\n        if (!previous) return\n        tooltips.value.set(_self, {\n          component: !obj.component ? undefined : markRaw(obj.component),\n          props: {...previous.props, ...newValue},\n        })\n      })\n\n      return _self\n    }\n\n    /**\n     * You can get the symbol param from the return value from the show method\n     */\n    const remove = (self: symbol) => {\n      tooltips.value.delete(self)\n    }\n\n    const set = (self: symbol, val: Partial<PrivateOrchestratedTooltip>) => {\n      const tip = tooltips.value.get(self)\n      if (!tip?.props) return\n      tip.props = {\n        ...tip.props,\n        ...val,\n      }\n    }\n\n    app.provide(tooltipPluginKey, {\n      tooltips,\n      show,\n      remove,\n      set,\n    })\n  },\n}\n"],"names":["tooltipPlugin","install","app","tooltips","ref","Map","provide","tooltipPluginKey","show","obj","resolvedProps","toRef","props","_self","Symbol","vue","watch","newValue","value","set","component","markRaw","_modelValue","_reference","delete","immediate","previous","get","remove","self","val","tip"],"mappings":"8IAQaA,EAAwB,CACnC,OAAAC,CAAQC,GACN,MAAMC,EAAWC,EAAAA,IAAQ,IAAAC,KAuDrBH,EAAAI,QAAQC,mBAAkB,CAC5BJ,WACAK,KApDYC,IACN,MAAAC,EAAgBC,EAAAA,MAAMF,EAAIG,OAE1BC,EAAQC,SA4BP,OA1BPC,EAAAC,MACEP,EAAIL,KACHa,IACMA,EAGMd,EAAAe,MAAMC,IAAIN,EAAO,CACxBO,UAAYX,EAAIW,UAAwBC,EAAAA,QAAQZ,EAAIW,gBAAxB,EAC5BR,MAAO,IAAIF,EAAcQ,MAAOI,aAAa,EAAOC,WAAYN,KAJzDd,EAAAe,MAAMM,OAAOX,EAMxB,GAEF,CACEY,WAAW,YAITf,GAAgBO,IACpB,MAAMS,EAAWvB,EAASe,MAAMS,IAAId,GAC/Ba,GACIvB,EAAAe,MAAMC,IAAIN,EAAO,CACxBO,UAAYX,EAAIW,UAAwBC,EAAAA,QAAQZ,EAAIW,gBAAxB,EAC5BR,MAAO,IAAIc,EAASd,SAAUK,IAC/B,IAGIJ,CAAA,EAsBPe,OAhBcC,IACL1B,EAAAe,MAAMM,OAAOK,EAAI,EAgB1BV,IAbU,CAACU,EAAcC,KACzB,MAAMC,EAAM5B,EAASe,MAAMS,IAAIE,UAC1BE,WAAKnB,SACVmB,EAAInB,MAAQ,IACPmB,EAAInB,SACJkB,GAAA,GAUT"}