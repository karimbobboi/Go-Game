{"version":3,"file":"BFormGroup.vue_vue_type_script_lang-C7ozJhaE.js","sources":["../src/utils/props.ts","../src/utils/normalizeSlot.ts","../src/components/BFormGroup/BFormGroup.vue"],"sourcesContent":["// Suffix can be a falsey value so nothing is appended to string\n// (helps when looping over props & some shouldn't change)\n\nimport {upperFirst} from './stringUtils'\n\n/**\n * Use data last parameters to allow for currying\n *\n * @param suffix\n * @param value\n * @returns\n */\nexport const suffixPropName = (suffix: string, value: string): string =>\n  value + (suffix ? upperFirst(suffix) : '')\n","import type {Slots, VNode} from 'vue'\n\nexport const normalizeSlot = (name: string, scope = {}, $slots: Slots = {}): VNode => {\n  // Ensure names is an array\n  const names = [name]\n  let slot\n  for (let i = 0; i < names.length && !slot; i++) {\n    const name = names[i]\n    slot = $slots[name]\n  }\n  // Note: in Vue 3.x, slots have been unified. No more scoped slots and all slots are exposed as functions\n  return (slot && typeof slot === 'function' ? slot(scope) : slot) as unknown as VNode\n}\n","<script lang=\"ts\">\nimport {useAriaInvalid} from '../../composables/useAriaInvalid'\nimport {RX_SPACE_SPLIT} from '../../utils/constants'\nimport {attemptFocus, isVisible} from '../../utils/dom'\nimport {computed, defineComponent, h, nextTick, onMounted, type PropType, ref, watch} from 'vue'\nimport BCol from '../BContainer/BCol.vue'\nimport BFormInvalidFeedback from '../BForm/BFormInvalidFeedback.vue'\nimport BFormRow from '../BForm/BFormRow.vue'\nimport BFormText from '../BForm/BFormText.vue'\nimport BFormValidFeedback from '../BForm/BFormValidFeedback.vue'\nimport type {AriaInvalid} from '../../types/AriaInvalid'\nimport {suffixPropName} from '../../utils/props'\nimport {IS_BROWSER} from '../../utils/event'\nimport {useStateClass} from '../../composables/useStateClass'\nimport {useId} from '../../composables/useId'\nimport {normalizeSlot} from '../../utils/normalizeSlot'\n\nconst INPUTS = ['input', 'select', 'textarea']\n// Selector for finding first input in the form group\nconst INPUT_SELECTOR = INPUTS.map((v) => `${v}:not([disabled])`).join()\n\n// A list of interactive elements (tag names) inside `<BFormGroup>`'s legend\nconst LEGEND_INTERACTIVE_ELEMENTS = [...INPUTS, 'a', 'button', 'label']\n\nexport const SLOT_NAME_LABEL = 'label'\nexport const SLOT_NAME_INVALID_FEEDBACK = 'invalid-feedback'\nexport const SLOT_NAME_VALID_FEEDBACK = 'valid-feedback'\nexport const SLOT_NAME_DESCRIPTION = 'description'\nexport const SLOT_NAME_DEFAULT = 'default'\n\nexport default defineComponent({\n  components: {BCol, BFormInvalidFeedback, BFormRow, BFormText, BFormValidFeedback},\n  props: {\n    ariaInvalid: {type: [Boolean, String] as PropType<AriaInvalid>, default: undefined},\n    contentCols: {type: [Boolean, String, Number], default: undefined},\n    contentColsLg: {type: [Boolean, String, Number], default: undefined},\n    contentColsMd: {type: [Boolean, String, Number], default: undefined},\n    contentColsSm: {type: [Boolean, String, Number], default: undefined},\n    contentColsXl: {type: [Boolean, String, Number], default: undefined},\n    description: {type: [String], default: undefined},\n    disabled: {type: Boolean, default: false},\n    feedbackAriaLive: {type: String, default: 'assertive'},\n    floating: {type: Boolean, default: false},\n    id: {type: String, default: undefined},\n    invalidFeedback: {type: String, default: undefined},\n    label: {type: String, default: undefined},\n    labelAlign: {type: [String], default: undefined},\n    labelAlignLg: {type: [String], default: undefined},\n    labelAlignMd: {type: [String], default: undefined},\n    labelAlignSm: {type: [String], default: undefined},\n    labelAlignXl: {type: [String], default: undefined},\n    labelClass: {type: [Array, Object, String], default: undefined},\n    labelCols: {type: [Boolean, String, Number], default: undefined},\n    labelColsLg: {type: [Boolean, String, Number], default: undefined},\n    labelColsMd: {type: [Boolean, String, Number], default: undefined},\n    labelColsSm: {type: [Boolean, String, Number], default: undefined},\n    labelColsXl: {type: [Boolean, String, Number], default: undefined},\n    labelFor: {type: String, default: undefined},\n    labelSize: {type: String, default: undefined},\n    labelVisuallyHidden: {type: Boolean, default: false},\n    state: {type: Boolean as PropType<boolean | null>, default: null},\n    tooltip: {type: Boolean, default: false},\n    validFeedback: {type: String, default: undefined},\n    validated: {type: Boolean, default: false},\n  },\n  setup(props) {\n    const ariaDescribedby: string | null = null as string | null\n    const breakPoints = ['xs', 'sm', 'md', 'lg', 'xl']\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const getAlignClasses = (props: any, prefix: string) =>\n      breakPoints.reduce((result: string[], breakpoint) => {\n        const suffix = suffixPropName(breakpoint === 'xs' ? '' : breakpoint, `${prefix}Align`)\n        const propValue: string = props[suffix] || null\n        if (propValue) {\n          breakpoint === 'xs'\n            ? result.push(`text-${propValue}`)\n            : result.push(`text-${breakpoint}-${propValue}`)\n        }\n\n        return result\n      }, [])\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const getColProps = (props: any, prefix: string) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      breakPoints.reduce((result: any, breakpoint: string) => {\n        const suffix = suffixPropName(breakpoint === 'xs' ? '' : breakpoint, `${prefix}Cols`)\n        let propValue = props[suffix]\n        // Handle case where the prop's value is an empty string,\n        // which represents `true`\n        propValue = propValue === '' ? true : propValue || false\n\n        if (!(typeof propValue === 'boolean') && propValue !== 'auto') {\n          // Convert to column size to number\n          const val = Number.parseInt(propValue)\n          propValue = Number.isNaN(val) ? 0 : val\n          // Ensure column size is greater than `0`\n          propValue = propValue > 0 ? propValue : false\n        }\n\n        // Add the prop to the list of props to give to `</BCol>`\n        // If breakpoint is '' (`${prefix}Cols` is `true`), then we use\n        // the 'col' prop to make equal width at 'xs'\n        if (propValue) {\n          // Extra care is required for xs since it does not have a BCol breakpoint prop\n          // Xs breakpoint is simply 'cols'\n          if (breakpoint === 'xs') {\n            result[typeof propValue === 'boolean' ? 'col' : 'cols'] = propValue\n          } else {\n            result[breakpoint || (typeof propValue === 'boolean' ? 'col' : 'cols')] = propValue\n          }\n        }\n        return result\n      }, {})\n\n    const content = ref<HTMLElement | null>(null)\n\n    // Sets the `aria-describedby` attribute on the input if `labelFor` is set\n    // Optionally accepts a string of Ids to remove as the second parameter\n    // Preserves any `aria-describedby` value(s) user may have on input\n    const updateAriaDescribedby = (newValue: string | null, oldValue: string | null = null) => {\n      if (IS_BROWSER && props.labelFor && content.value !== null) {\n        // We need to escape `labelFor` since it can be user-provided\n        const $input = content.value.querySelector(`#${CSS.escape(props.labelFor)}`)\n        if ($input) {\n          const attr = 'aria-describedby'\n          const newIds = (newValue || '').split(RX_SPACE_SPLIT)\n          const oldIds = (oldValue || '').split(RX_SPACE_SPLIT)\n\n          // Update Id list, preserving any original Ids\n          // and ensuring the Id's are unique\n          const ids = ($input.getAttribute(attr) || '')\n            .split(RX_SPACE_SPLIT)\n            .filter((id) => !oldIds.includes(id))\n            .concat(newIds)\n            .filter((id, index, ids) => ids.indexOf(id) === index)\n            .filter((x) => x)\n            .join(' ')\n            .trim()\n\n          if (ids) {\n            $input.setAttribute(attr, ids)\n          } else {\n            $input.removeAttribute(attr)\n          }\n        }\n      }\n    }\n\n    const contentColProps = computed(() => getColProps(props, 'content'))\n    const labelAlignClasses = computed(() => getAlignClasses(props, 'label'))\n    const labelColProps = computed(() => getColProps(props, 'label'))\n    const isHorizontal = computed(\n      () =>\n        // Determine if the form group will be rendered horizontal\n        // based on the existence of 'content-col' or 'label-col' props\n        Object.keys(contentColProps.value).length > 0 || Object.keys(labelColProps.value).length > 0\n    )\n\n    const stateClass = useStateClass(() => props.state)\n\n    const computedAriaInvalid = useAriaInvalid(\n      () => props.ariaInvalid,\n      () => props.state\n    )\n\n    watch(\n      () => ariaDescribedby,\n      (newValue: string | null, oldValue: string | null) => {\n        if (newValue !== oldValue) {\n          updateAriaDescribedby(newValue, oldValue)\n        }\n      }\n    )\n\n    onMounted(() => {\n      nextTick(() => {\n        // Set `aria-describedby` on the input specified by `labelFor`\n        // We do this in a `$nextTick()` to ensure the children have finished rendering\n        updateAriaDescribedby(ariaDescribedby)\n      })\n    })\n\n    const onLegendClick = (event: Readonly<MouseEvent>) => {\n      // Don't do anything if `labelFor` is set\n      if (props.labelFor || content.value === null) return\n\n      const {target} = event\n      const tagName = target ? (target as HTMLElement).tagName : ''\n\n      // If clicked an interactive element inside legend,\n      // we just let the default happen\n      if (LEGEND_INTERACTIVE_ELEMENTS.indexOf(tagName) !== -1) return\n\n      // If only a single input, focus it, emulating label behaviour\n      const inputs = [...content.value.querySelectorAll(INPUT_SELECTOR)].filter(isVisible)\n      const [inp] = inputs\n      if (inputs.length === 1 && inp instanceof HTMLElement) {\n        attemptFocus(inp)\n      }\n    }\n\n    return {\n      ariaDescribedby,\n      computedAriaInvalid,\n      contentColProps,\n      isHorizontal,\n      labelAlignClasses,\n      labelColProps,\n      onLegendClick,\n      stateClass,\n    }\n  },\n  render() {\n    const props = this.$props\n    const slots = this.$slots\n\n    const id = useId()\n    const isFieldset = !props.labelFor\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let $label: any = null\n    const labelContent = normalizeSlot(SLOT_NAME_LABEL, {}, slots) || props.label\n    const labelId = labelContent ? useId(undefined, '_BV_label_').value : null\n\n    if (labelContent || this.isHorizontal) {\n      const labelTag: 'legend' | 'label' = isFieldset ? 'legend' : 'label'\n      if (props.labelVisuallyHidden) {\n        if (labelContent) {\n          $label = h(\n            labelTag,\n            {\n              class: 'visually-hidden',\n              id: labelId,\n              for: props.labelFor || null,\n            },\n            labelContent\n          )\n        }\n        if (this.isHorizontal) {\n          $label = h(BCol, this.labelColProps, {default: () => $label})\n        } else {\n          $label = h('div', {}, [$label])\n        }\n      } else {\n        const renderProps = {\n          onClick: isFieldset ? this.onLegendClick : null,\n          ...(this.isHorizontal ? this.labelColProps : {}),\n          tag: this.isHorizontal ? labelTag : null,\n          id: labelId,\n          for: props.labelFor || null,\n          tabIndex: isFieldset ? '-1' : null,\n          class: [\n            this.isHorizontal ? 'col-form-label' : 'form-label',\n            {\n              'bv-no-focus-ring': isFieldset,\n              'col-form-label': this.isHorizontal || isFieldset,\n              'pt-0': !this.isHorizontal && isFieldset,\n              'd-block': !this.isHorizontal && !isFieldset,\n              [`col-form-label-${props.labelSize}`]: !!props.labelSize,\n            },\n            this.labelAlignClasses,\n            props.labelClass,\n          ],\n        }\n        if (this.isHorizontal) {\n          $label = h(BCol, renderProps, {default: () => labelContent})\n        } else {\n          $label = h(labelTag, renderProps, labelContent)\n        }\n      }\n    }\n\n    let $invalidFeedback = null\n    const invalidFeedbackContent =\n      normalizeSlot(SLOT_NAME_INVALID_FEEDBACK, {}, slots) || this.invalidFeedback\n    const invalidFeedbackId = invalidFeedbackContent\n      ? useId(undefined, '_BV_feedback_invalid_').value\n      : undefined\n\n    if (invalidFeedbackContent) {\n      $invalidFeedback = h(\n        BFormInvalidFeedback,\n        {\n          ariaLive: props.feedbackAriaLive,\n          id: invalidFeedbackId,\n          state: props.state,\n          tooltip: props.tooltip,\n        },\n        {default: () => invalidFeedbackContent}\n      )\n    }\n\n    let $validFeedback = null\n    const validFeedbackContent =\n      normalizeSlot(SLOT_NAME_VALID_FEEDBACK, {}, slots) || this.validFeedback\n    const validFeedbackId = validFeedbackContent\n      ? useId(undefined, '_BV_feedback_valid_').value\n      : undefined\n\n    if (validFeedbackContent) {\n      $validFeedback = h(\n        BFormValidFeedback,\n        {\n          ariaLive: props.feedbackAriaLive,\n          id: validFeedbackId,\n          state: props.state,\n          tooltip: props.tooltip,\n        },\n        {default: () => validFeedbackContent}\n        // validFeedbackContent\n      )\n    }\n\n    let $description = null\n    const descriptionContent = normalizeSlot(SLOT_NAME_DESCRIPTION, {}, slots) || this.description\n    const descriptionId = descriptionContent\n      ? useId(undefined, '_BV_description_').value\n      : undefined\n    if (descriptionContent) {\n      $description = h(\n        BFormText,\n        {\n          id: descriptionId,\n        },\n        {default: () => descriptionContent}\n      )\n    }\n\n    // Update `ariaDescribedby`\n    // Screen readers will read out any content linked to by `aria-describedby`\n    // even if the content is hidden with `display: none;`, hence we only include\n    // feedback Ids if the form group's state is explicitly valid or invalid\n    const ariaDescribedby = (this.ariaDescribedby =\n      [\n        descriptionId,\n        props.state === false ? invalidFeedbackId : null,\n        props.state === true ? validFeedbackId : null,\n      ]\n        .filter((x) => x)\n        .join(' ') || null)\n\n    const contentBlocks = [\n      normalizeSlot(SLOT_NAME_DEFAULT, {ariaDescribedby, descriptionId, id, labelId}, slots) || '',\n      $invalidFeedback,\n      $validFeedback,\n      $description,\n    ]\n    if (!this.isHorizontal && props.floating) contentBlocks.push($label)\n\n    let $content = h(\n      'div',\n      {\n        ref: 'content',\n        class: [\n          {\n            'form-floating': !this.isHorizontal && props.floating,\n          },\n        ],\n      },\n      contentBlocks\n    )\n    if (this.isHorizontal) {\n      $content = h(BCol, {ref: 'content', ...this.contentColProps}, {default: () => contentBlocks})\n    }\n\n    // Return it wrapped in a form group\n    // Note: Fieldsets do not support adding `row` or `form-row` directly\n    // to them due to browser specific render issues, so we move the `form-row`\n    // to an inner wrapper div when horizontal and using a fieldset\n    const rowProps = {\n      'class': [\n        this.stateClass,\n        {\n          'was-validated': props.validated,\n        },\n      ],\n      'id': useId(() => props.id).value,\n      'disabled': isFieldset ? props.disabled : null,\n      'role': isFieldset ? null : 'group',\n      'aria-invalid': this.computedAriaInvalid,\n      // Only apply `aria-labelledby` if we are a horizontal fieldset\n      // as the legend is no longer a direct child of fieldset\n      'aria-labelledby': isFieldset && this.isHorizontal ? labelId : null,\n    }\n\n    if (this.isHorizontal && !isFieldset) {\n      return h(BFormRow, rowProps, {default: () => [$label, $content]})\n    }\n\n    return h(\n      isFieldset ? 'fieldset' : 'div',\n      rowProps,\n      this.isHorizontal && isFieldset\n        ? [h(BFormRow, null, {default: () => [$label, $content]})]\n        : this.isHorizontal || !props.floating\n          ? [$label, $content]\n          : [$content]\n    )\n  },\n})\n</script>\n"],"names":["suffixPropName","suffix","value","upperFirst","normalizeSlot","name","scope","$slots","names","slot","i","length","INPUTS","INPUT_SELECTOR","map","v","join","LEGEND_INTERACTIVE_ELEMENTS","_sfc_main","defineComponent","components","BCol","BFormInvalidFeedback","BFormRow","BFormText","BFormValidFeedback","props","ariaInvalid","type","Boolean","String","default","contentCols","Number","contentColsLg","contentColsMd","contentColsSm","contentColsXl","description","disabled","feedbackAriaLive","floating","id","invalidFeedback","label","labelAlign","labelAlignLg","labelAlignMd","labelAlignSm","labelAlignXl","labelClass","Array","Object","labelCols","labelColsLg","labelColsMd","labelColsSm","labelColsXl","labelFor","labelSize","labelVisuallyHidden","state","tooltip","validFeedback","validated","setup","ariaDescribedby","breakPoints","getColProps","prefix","reduce","result","breakpoint","propValue","val","parseInt","isNaN","content","ref","updateAriaDescribedby","newValue","oldValue","IS_BROWSER","$input","querySelector","CSS","escape","attr","newIds","split","RX_SPACE_SPLIT","oldIds","ids","getAttribute","filter","includes","concat","index","indexOf","x","trim","setAttribute","removeAttribute","contentColProps","computed","labelAlignClasses","getAlignClasses","push","labelColProps","isHorizontal","keys","stateClass","useStateClass","computedAriaInvalid","useAriaInvalid","vue","watch","onMounted","nextTick","onLegendClick","event","target","tagName","inputs","querySelectorAll","isVisible","inp","HTMLElement","attemptFocus","render","this","$props","slots","useId","isFieldset","$label","labelContent","labelId","labelTag","h","class","for","renderProps","onClick","tag","tabIndex","$invalidFeedback","invalidFeedbackContent","invalidFeedbackId","ariaLive","$validFeedback","validFeedbackContent","validFeedbackId","_sfc_main$3","$description","descriptionContent","descriptionId","_sfc_main$2","contentBlocks","$content","rowProps","role"],"mappings":"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"}