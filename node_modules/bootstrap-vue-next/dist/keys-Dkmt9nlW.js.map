{"version":3,"file":"keys-Dkmt9nlW.js","sources":["../src/utils/bvnPrefix.ts","../src/utils/keys.ts"],"sourcesContent":["export const bvnPrefix = (value: string, suffix: string = '') => {\n  const suffixWithTrail = `${suffix}___`\n  return `___BVN__ID__${value}__${suffix ? suffixWithTrail : ''}`\n}\n","import type {ComponentInternalInstance, ComputedRef, InjectionKey, Ref} from 'vue'\nimport type {TabType} from '../types/Tab'\nimport type {ClassValue} from '../types/AnyValuedAttributes'\nimport type {Numberish} from '../types/CommonTypes'\nimport type {LiteralUnion} from '../types/LiteralUnion'\nimport type {Size} from '../types/Size'\nimport type {RadiusElement} from '../types/RadiusElement'\nimport type {\n  BgColorVariant,\n  ButtonVariant,\n  ColorVariant,\n  TextColorVariant,\n} from '../types/ColorTypes'\nimport type {CheckboxValue} from '../types/CheckboxTypes'\nimport type {RadioValue} from '../types/RadioTypes'\nimport type {BreadcrumbItemRaw} from '../types/BreadcrumbTypes'\nimport type {\n  ModalOrchestratorMapValue,\n  ModalOrchestratorShowParam,\n  PopoverOrchestratorMapValue,\n  PopoverOrchestratorShowParam,\n  PrivateOrchestratedPopover,\n  PrivateOrchestratedTooltip,\n  ToastOrchestratorArrayValue,\n  ToastOrchestratorShowParam,\n  TooltipOrchestratorMapValue,\n  TooltipOrchestratorShowParam,\n} from '../types/ComponentOrchestratorTypes'\nimport type {BvnComponentProps} from '../types/BootstrapVueOptions'\nimport {bvnPrefix} from './bvnPrefix'\n\nconst createBvnInjectionKey = (name: string) => bvnPrefix(name) as unknown as symbol // Type cast to symbol, these should be static\n\n// BCarousel\nexport const carouselInjectionKey: InjectionKey<{\n  background: Readonly<Ref<string | undefined>>\n  width: Readonly<Ref<string | undefined>>\n  height: Readonly<Ref<string | undefined>>\n}> = createBvnInjectionKey('carousel')\n\n// BTabs\nexport const tabsInjectionKey: InjectionKey<{\n  lazy: Readonly<Ref<boolean>>\n  card: Readonly<Ref<boolean>>\n  noFade: Readonly<Ref<boolean>>\n  registerTab: (tab: Readonly<Ref<TabType>>) => void\n  unregisterTab: (id: string) => void\n  activateTab: (id: string | undefined) => void\n  activeTabClass: Readonly<Ref<ClassValue>>\n  inactiveTabClass: Readonly<Ref<ClassValue>>\n  tabClass: Readonly<Ref<ClassValue>>\n  activeId: Readonly<Ref<string | undefined>>\n}> = createBvnInjectionKey('tabs')\n\n// BProgress\nexport const progressInjectionKey: InjectionKey<{\n  animated: Readonly<Ref<boolean | undefined>>\n  max: Readonly<Ref<Numberish>>\n  showProgress: Readonly<Ref<boolean | undefined>>\n  showValue: Readonly<Ref<boolean | undefined>>\n  striped: Readonly<Ref<boolean | undefined>>\n}> = createBvnInjectionKey('progress')\n\n// BListGroup\nexport const listGroupInjectionKey: InjectionKey<{\n  numbered: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('listGroup')\n\n// BAvatarGroup\nexport const avatarGroupInjectionKey: InjectionKey<{\n  overlapScale: Readonly<Ref<number>>\n  size: Readonly<Ref<LiteralUnion<Size, Numberish> | undefined>>\n  square: Readonly<Ref<boolean>>\n  rounded: Readonly<Ref<RadiusElement | boolean>>\n  roundedTop: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedBottom: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedStart: Readonly<Ref<RadiusElement | boolean | undefined>>\n  roundedEnd: Readonly<Ref<RadiusElement | boolean | undefined>>\n  variant: Readonly<Ref<ColorVariant | null>>\n  bgVariant: Readonly<Ref<BgColorVariant | null>>\n  textVariant: Readonly<Ref<TextColorVariant | null>>\n}> = createBvnInjectionKey('avatarGroup')\n\n// BAccordion\nexport const accordionInjectionKey: InjectionKey<{\n  openItem: Readonly<Ref<string | undefined>>\n  free: Readonly<Ref<boolean>>\n  setOpenItem: (id: string) => void\n}> = createBvnInjectionKey('accordion')\n\n// BFormCheckboxGroup\nexport const checkboxGroupKey: InjectionKey<{\n  modelValue: Ref<readonly CheckboxValue[]>\n  switch: Readonly<Ref<boolean>>\n  buttonVariant: Readonly<Ref<ButtonVariant | null>>\n  form: Readonly<Ref<string | undefined>>\n  name: Readonly<Ref<string>>\n  state: Readonly<Ref<boolean | undefined | null>>\n  plain: Readonly<Ref<boolean>>\n  size: Readonly<Ref<Size>>\n  inline: Readonly<Ref<boolean>>\n  reverse: Readonly<Ref<boolean>>\n  required: Readonly<Ref<boolean>>\n  buttons: Readonly<Ref<boolean>>\n  disabled: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('checkboxGroup')\n\nexport const radioGroupKey: InjectionKey<{\n  modelValue: Ref<RadioValue>\n  buttonVariant: Readonly<Ref<ButtonVariant | null>>\n  form: Readonly<Ref<string | undefined>>\n  name: Readonly<Ref<string>>\n  buttons: Readonly<Ref<boolean>>\n  state: Readonly<Ref<boolean | undefined | null>>\n  plain: Readonly<Ref<boolean>>\n  size: Readonly<Ref<Size>>\n  inline: Readonly<Ref<boolean>>\n  reverse: Readonly<Ref<boolean>>\n  required: Readonly<Ref<boolean>>\n  disabled: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('radioGroup')\n\n// Collapse\nexport const collapseInjectionKey: InjectionKey<{\n  id?: Readonly<Ref<string>>\n  readonly hide?: () => void\n  readonly show?: () => void\n  readonly toggle?: () => void\n  visible?: Readonly<Ref<boolean>>\n  isNav?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('collapse')\n\nexport const dropdownInjectionKey: InjectionKey<{\n  id?: Readonly<Ref<string>>\n  readonly hide?: () => void\n  readonly show?: () => void\n  readonly toggle?: () => void\n  visible?: Readonly<Ref<boolean>>\n  isNav?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('dropdown')\n\nexport const navbarInjectionKey: InjectionKey<{\n  tag?: Readonly<Ref<string>>\n  autoClose?: Readonly<Ref<boolean>>\n}> = createBvnInjectionKey('navbar')\n\nexport const rtlPluginKey: InjectionKey<{\n  isRtl: Ref<boolean>\n  locale: Ref<string | undefined>\n}> = createBvnInjectionKey('rtlPlugin')\n\nexport const breadcrumbPluginKey: InjectionKey<{\n  items: Ref<BreadcrumbItemRaw[]>\n  reset: () => void\n}> = createBvnInjectionKey('breadcrumbPlugin')\n\nexport const modalManagerPluginKey: InjectionKey<{\n  stack: ComputedRef<ComponentInternalInstance[]>\n  countStack: ComputedRef<number>\n  lastStack: ComputedRef<ComponentInternalInstance | undefined>\n  pushStack: (modal: Readonly<ComponentInternalInstance>) => void\n  removeStack: (modal: Readonly<ComponentInternalInstance>) => void\n  registry: Readonly<Ref<Map<number, ComponentInternalInstance>>>\n  pushRegistry: (modal: Readonly<ComponentInternalInstance>) => void\n  removeRegistry: (modal: Readonly<ComponentInternalInstance>) => void\n}> = createBvnInjectionKey('modalManagerPlugin')\n\nexport const defaultsKey: InjectionKey<Ref<Partial<BvnComponentProps>>> =\n  createBvnInjectionKey('defaults')\n\nexport const inputGroupKey: InjectionKey<boolean> = createBvnInjectionKey('inputGroup')\n\nexport const toastPluginKey: InjectionKey<{\n  toasts: Ref<ToastOrchestratorArrayValue[]>\n  _setIsAppend: (value: boolean) => void\n  show: (obj: ToastOrchestratorShowParam) => symbol\n  remove: (self: symbol) => void\n  leave: (self: symbol) => void\n}> = createBvnInjectionKey('toastPlugin')\n\nexport const modalControllerPluginKey: InjectionKey<{\n  modals: Ref<Map<symbol, ModalOrchestratorMapValue>>\n  show: (obj: ModalOrchestratorShowParam) => Promise<boolean | null>\n  confirm: (obj: ModalOrchestratorShowParam) => Promise<boolean | null>\n  remove: (self: symbol) => void\n  leave: (self: symbol) => void\n}> = createBvnInjectionKey('modalControllerPlugin')\n\nexport const tooltipPluginKey: InjectionKey<{\n  tooltips: Ref<Map<symbol, TooltipOrchestratorMapValue>>\n  show: (obj: TooltipOrchestratorShowParam) => symbol\n  remove: (self: symbol) => void\n  set: (self: symbol, val: Partial<PrivateOrchestratedTooltip>) => void\n}> = createBvnInjectionKey('tooltipPlugin')\n\nexport const popoverPluginKey: InjectionKey<{\n  popovers: Ref<Map<symbol, PopoverOrchestratorMapValue>>\n  show: (obj: PopoverOrchestratorShowParam) => symbol\n  remove: (self: symbol) => void\n  set: (self: symbol, val: Partial<PrivateOrchestratedPopover>) => void\n}> = createBvnInjectionKey('popoverPlugin')\n"],"names":["bvnPrefix","value","suffix","createBvnInjectionKey","name","carouselInjectionKey","tabsInjectionKey","progressInjectionKey","listGroupInjectionKey","avatarGroupInjectionKey","accordionInjectionKey","checkboxGroupKey","radioGroupKey","collapseInjectionKey","dropdownInjectionKey","navbarInjectionKey","rtlPluginKey","breadcrumbPluginKey","modalManagerPluginKey","defaultsKey","inputGroupKey","toastPluginKey","modalControllerPluginKey","tooltipPluginKey","popoverPluginKey"],"mappings":"aAAO,MAAMA,EAAY,CAACC,EAAeC,EAAiB,KAEjD,eAAeD,MAAUC,EADR,GAAGA,OACgC,KC6BvDC,EAAyBC,GAAiBJ,EAAUI,GAG7CC,EAIRF,EAAsB,YAGdG,EAWRH,EAAsB,QAGdI,EAMRJ,EAAsB,YAGdK,EAERL,EAAsB,aAGdM,EAYRN,EAAsB,eAGdO,EAIRP,EAAsB,aAGdQ,EAcRR,EAAsB,iBAEdS,EAaRT,EAAsB,cAGdU,EAORV,EAAsB,YAEdW,EAORX,EAAsB,YAEdY,EAGRZ,EAAsB,UAEda,EAGRb,EAAsB,aAEdc,EAGRd,EAAsB,oBAEde,EASRf,EAAsB,sBAEdgB,EACXhB,EAAsB,YAEXiB,EAAuCjB,EAAsB,cAE7DkB,EAMRlB,EAAsB,eAEdmB,EAMRnB,EAAsB,yBAEdoB,EAKRpB,EAAsB,iBAEdqB,EAKRrB,EAAsB"}